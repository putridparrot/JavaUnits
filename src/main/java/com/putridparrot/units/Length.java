// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

package com.putridparrot.units;

/**
 * Length conversion functions
 */
public final class Length {
	/**
	 * Centimetres conversion functions
	 */
	public static class Centimetres {
		/**
		 * Converts the supplied Centimetres value to Millimetres
		 * @param value The Centimetres input value
		 * @return The value in Millimetres
		 */
		public static double toMillimetres(double value) {
			return value * 10.0;
		}
		/**
		 * Converts the supplied Centimetres value to Metres
		 * @param value The Centimetres input value
		 * @return The value in Metres
		 */
		public static double toMetres(double value) {
			return value / 100.0;
		}
		/**
		 * Converts the supplied Centimetres value to Kilometres
		 * @param value The Centimetres input value
		 * @return The value in Kilometres
		 */
		public static double toKilometres(double value) {
			return value / 100000.0;
		}
		/**
		 * Converts the supplied Centimetres value to Inches
		 * @param value The Centimetres input value
		 * @return The value in Inches
		 */
		public static double toInches(double value) {
			return value / 2.54;
		}
		/**
		 * Converts the supplied Centimetres value to Feet
		 * @param value The Centimetres input value
		 * @return The value in Feet
		 */
		public static double toFeet(double value) {
			return value / 30.48;
		}
		/**
		 * Converts the supplied Centimetres value to Yards
		 * @param value The Centimetres input value
		 * @return The value in Yards
		 */
		public static double toYards(double value) {
			return value / 91.44;
		}
		/**
		 * Converts the supplied Centimetres value to Miles
		 * @param value The Centimetres input value
		 * @return The value in Miles
		 */
		public static double toMiles(double value) {
			return value / 160934.4;
		}
		/**
		 * Converts the supplied Centimetres value to Nautical Miles
		 * @param value The Centimetres input value
		 * @return The value in Nautical Miles
		 */
		public static double toNauticalMiles(double value) {
			return value / 185200.0;
		}
	}
	/**
	 * Feet conversion functions
	 */
	public static class Feet {
		/**
		 * Converts the supplied Feet value to Millimetres
		 * @param value The Feet input value
		 * @return The value in Millimetres
		 */
		public static double toMillimetres(double value) {
			return value * 304.8;
		}
		/**
		 * Converts the supplied Feet value to Centimetres
		 * @param value The Feet input value
		 * @return The value in Centimetres
		 */
		public static double toCentimetres(double value) {
			return value * 30.48;
		}
		/**
		 * Converts the supplied Feet value to Metres
		 * @param value The Feet input value
		 * @return The value in Metres
		 */
		public static double toMetres(double value) {
			return value * 0.3048;
		}
		/**
		 * Converts the supplied Feet value to Kilometres
		 * @param value The Feet input value
		 * @return The value in Kilometres
		 */
		public static double toKilometres(double value) {
			return value * 0.0003048;
		}
		/**
		 * Converts the supplied Feet value to Inches
		 * @param value The Feet input value
		 * @return The value in Inches
		 */
		public static double toInches(double value) {
			return value * 12.0;
		}
		/**
		 * Converts the supplied Feet value to Yards
		 * @param value The Feet input value
		 * @return The value in Yards
		 */
		public static double toYards(double value) {
			return value / 3.0;
		}
		/**
		 * Converts the supplied Feet value to Miles
		 * @param value The Feet input value
		 * @return The value in Miles
		 */
		public static double toMiles(double value) {
			return value / 5280.0;
		}
		/**
		 * Converts the supplied Feet value to Nautical Miles
		 * @param value The Feet input value
		 * @return The value in Nautical Miles
		 */
		public static double toNauticalMiles(double value) {
			return value / 6076.12;
		}
	}
	/**
	 * Inches conversion functions
	 */
	public static class Inches {
		/**
		 * Converts the supplied Inches value to Millimetres
		 * @param value The Inches input value
		 * @return The value in Millimetres
		 */
		public static double toMillimetres(double value) {
			return value * 25.4;
		}
		/**
		 * Converts the supplied Inches value to Centimetres
		 * @param value The Inches input value
		 * @return The value in Centimetres
		 */
		public static double toCentimetres(double value) {
			return value * 2.54;
		}
		/**
		 * Converts the supplied Inches value to Metres
		 * @param value The Inches input value
		 * @return The value in Metres
		 */
		public static double toMetres(double value) {
			return value * 0.0254;
		}
		/**
		 * Converts the supplied Inches value to Kilometres
		 * @param value The Inches input value
		 * @return The value in Kilometres
		 */
		public static double toKilometres(double value) {
			return value * 0.0000254;
		}
		/**
		 * Converts the supplied Inches value to Feet
		 * @param value The Inches input value
		 * @return The value in Feet
		 */
		public static double toFeet(double value) {
			return value / 12.0;
		}
		/**
		 * Converts the supplied Inches value to Yards
		 * @param value The Inches input value
		 * @return The value in Yards
		 */
		public static double toYards(double value) {
			return value / 36.0;
		}
		/**
		 * Converts the supplied Inches value to Miles
		 * @param value The Inches input value
		 * @return The value in Miles
		 */
		public static double toMiles(double value) {
			return value / 63360.0;
		}
		/**
		 * Converts the supplied Inches value to Nautical Miles
		 * @param value The Inches input value
		 * @return The value in Nautical Miles
		 */
		public static double toNauticalMiles(double value) {
			return value / 72913.4;
		}
	}
	/**
	 * Kilometres conversion functions
	 */
	public static class Kilometres {
		/**
		 * Converts the supplied Kilometres value to Millimetres
		 * @param value The Kilometres input value
		 * @return The value in Millimetres
		 */
		public static double toMillimetres(double value) {
			return value * 1000000.0;
		}
		/**
		 * Converts the supplied Kilometres value to Centimetres
		 * @param value The Kilometres input value
		 * @return The value in Centimetres
		 */
		public static double toCentimetres(double value) {
			return value * 100000.0;
		}
		/**
		 * Converts the supplied Kilometres value to Metres
		 * @param value The Kilometres input value
		 * @return The value in Metres
		 */
		public static double toMetres(double value) {
			return value * 1000.0;
		}
		/**
		 * Converts the supplied Kilometres value to Inches
		 * @param value The Kilometres input value
		 * @return The value in Inches
		 */
		public static double toInches(double value) {
			return value / 0.0000254;
		}
		/**
		 * Converts the supplied Kilometres value to Feet
		 * @param value The Kilometres input value
		 * @return The value in Feet
		 */
		public static double toFeet(double value) {
			return value / 0.0003048;
		}
		/**
		 * Converts the supplied Kilometres value to Yards
		 * @param value The Kilometres input value
		 * @return The value in Yards
		 */
		public static double toYards(double value) {
			return value / 0.0009144;
		}
		/**
		 * Converts the supplied Kilometres value to Miles
		 * @param value The Kilometres input value
		 * @return The value in Miles
		 */
		public static double toMiles(double value) {
			return value / 1.609344;
		}
		/**
		 * Converts the supplied Kilometres value to Nautical Miles
		 * @param value The Kilometres input value
		 * @return The value in Nautical Miles
		 */
		public static double toNauticalMiles(double value) {
			return value / 1.85200;
		}
	}
	/**
	 * Metres conversion functions
	 */
	public static class Metres {
		/**
		 * Converts the supplied Metres value to Millimetres
		 * @param value The Metres input value
		 * @return The value in Millimetres
		 */
		public static double toMillimetres(double value) {
			return value * 1000.0;
		}
		/**
		 * Converts the supplied Metres value to Centimetres
		 * @param value The Metres input value
		 * @return The value in Centimetres
		 */
		public static double toCentimetres(double value) {
			return value * 100.0;
		}
		/**
		 * Converts the supplied Metres value to Kilometres
		 * @param value The Metres input value
		 * @return The value in Kilometres
		 */
		public static double toKilometres(double value) {
			return value / 1000.0;
		}
		/**
		 * Converts the supplied Metres value to Inches
		 * @param value The Metres input value
		 * @return The value in Inches
		 */
		public static double toInches(double value) {
			return value / 0.0254;
		}
		/**
		 * Converts the supplied Metres value to Feet
		 * @param value The Metres input value
		 * @return The value in Feet
		 */
		public static double toFeet(double value) {
			return value / 0.3048;
		}
		/**
		 * Converts the supplied Metres value to Yards
		 * @param value The Metres input value
		 * @return The value in Yards
		 */
		public static double toYards(double value) {
			return value / 0.9144;
		}
		/**
		 * Converts the supplied Metres value to Miles
		 * @param value The Metres input value
		 * @return The value in Miles
		 */
		public static double toMiles(double value) {
			return value / 1609.344;
		}
		/**
		 * Converts the supplied Metres value to Nautical Miles
		 * @param value The Metres input value
		 * @return The value in Nautical Miles
		 */
		public static double toNauticalMiles(double value) {
			return value / 1852.0;
		}
	}
	/**
	 * Miles conversion functions
	 */
	public static class Miles {
		/**
		 * Converts the supplied Miles value to Millimetres
		 * @param value The Miles input value
		 * @return The value in Millimetres
		 */
		public static double toMillimetres(double value) {
			return value * 1609344.0;
		}
		/**
		 * Converts the supplied Miles value to Centimetres
		 * @param value The Miles input value
		 * @return The value in Centimetres
		 */
		public static double toCentimetres(double value) {
			return value * 160934.4;
		}
		/**
		 * Converts the supplied Miles value to Metres
		 * @param value The Miles input value
		 * @return The value in Metres
		 */
		public static double toMetres(double value) {
			return value * 1609.344;
		}
		/**
		 * Converts the supplied Miles value to Kilometres
		 * @param value The Miles input value
		 * @return The value in Kilometres
		 */
		public static double toKilometres(double value) {
			return value * 1.609344;
		}
		/**
		 * Converts the supplied Miles value to Inches
		 * @param value The Miles input value
		 * @return The value in Inches
		 */
		public static double toInches(double value) {
			return value * 63360.0;
		}
		/**
		 * Converts the supplied Miles value to Feet
		 * @param value The Miles input value
		 * @return The value in Feet
		 */
		public static double toFeet(double value) {
			return value * 5280.0;
		}
		/**
		 * Converts the supplied Miles value to Yards
		 * @param value The Miles input value
		 * @return The value in Yards
		 */
		public static double toYards(double value) {
			return value * 1760.0;
		}
		/**
		 * Converts the supplied Miles value to Nautical Miles
		 * @param value The Miles input value
		 * @return The value in Nautical Miles
		 */
		public static double toNauticalMiles(double value) {
			return value / 1.15078;
		}
	}
	/**
	 * Millimetres conversion functions
	 */
	public static class Millimetres {
		/**
		 * Converts the supplied Millimetres value to Centimetres
		 * @param value The Millimetres input value
		 * @return The value in Centimetres
		 */
		public static double toCentimetres(double value) {
			return value / 10.0;
		}
		/**
		 * Converts the supplied Millimetres value to Metres
		 * @param value The Millimetres input value
		 * @return The value in Metres
		 */
		public static double toMetres(double value) {
			return value / 1000.0;
		}
		/**
		 * Converts the supplied Millimetres value to Kilometres
		 * @param value The Millimetres input value
		 * @return The value in Kilometres
		 */
		public static double toKilometres(double value) {
			return value / 1000000.0;
		}
		/**
		 * Converts the supplied Millimetres value to Inches
		 * @param value The Millimetres input value
		 * @return The value in Inches
		 */
		public static double toInches(double value) {
			return value / 25.4;
		}
		/**
		 * Converts the supplied Millimetres value to Feet
		 * @param value The Millimetres input value
		 * @return The value in Feet
		 */
		public static double toFeet(double value) {
			return value / 304.8;
		}
		/**
		 * Converts the supplied Millimetres value to Yards
		 * @param value The Millimetres input value
		 * @return The value in Yards
		 */
		public static double toYards(double value) {
			return value / 914.4;
		}
		/**
		 * Converts the supplied Millimetres value to Miles
		 * @param value The Millimetres input value
		 * @return The value in Miles
		 */
		public static double toMiles(double value) {
			return value / 1609344.0;
		}
		/**
		 * Converts the supplied Millimetres value to Nautical Miles
		 * @param value The Millimetres input value
		 * @return The value in Nautical Miles
		 */
		public static double toNauticalMiles(double value) {
			return value / 1852000.0;
		}
	}
	/**
	 * Nautical Miles conversion functions
	 */
	public static class NauticalMiles {
		/**
		 * Converts the supplied Nautical Miles value to Millimetres
		 * @param value The Nautical Miles input value
		 * @return The value in Millimetres
		 */
		public static double toMillimetres(double value) {
			return value * 1852000.0;
		}
		/**
		 * Converts the supplied Nautical Miles value to Centimetres
		 * @param value The Nautical Miles input value
		 * @return The value in Centimetres
		 */
		public static double toCentimetres(double value) {
			return value * 185200.0;
		}
		/**
		 * Converts the supplied Nautical Miles value to Metres
		 * @param value The Nautical Miles input value
		 * @return The value in Metres
		 */
		public static double toMetres(double value) {
			return value * 1852.0;
		}
		/**
		 * Converts the supplied Nautical Miles value to Kilometres
		 * @param value The Nautical Miles input value
		 * @return The value in Kilometres
		 */
		public static double toKilometres(double value) {
			return value * 1.85200;
		}
		/**
		 * Converts the supplied Nautical Miles value to Inches
		 * @param value The Nautical Miles input value
		 * @return The value in Inches
		 */
		public static double toInches(double value) {
			return value * 72913.4;
		}
		/**
		 * Converts the supplied Nautical Miles value to Feet
		 * @param value The Nautical Miles input value
		 * @return The value in Feet
		 */
		public static double toFeet(double value) {
			return value * 6076.12;
		}
		/**
		 * Converts the supplied Nautical Miles value to Yards
		 * @param value The Nautical Miles input value
		 * @return The value in Yards
		 */
		public static double toYards(double value) {
			return value * 2025.37;
		}
		/**
		 * Converts the supplied Nautical Miles value to Miles
		 * @param value The Nautical Miles input value
		 * @return The value in Miles
		 */
		public static double toMiles(double value) {
			return value * 1.15078;
		}
	}
	/**
	 * Yards conversion functions
	 */
	public static class Yards {
		/**
		 * Converts the supplied Yards value to Millimetres
		 * @param value The Yards input value
		 * @return The value in Millimetres
		 */
		public static double toMillimetres(double value) {
			return value * 914.4;
		}
		/**
		 * Converts the supplied Yards value to Centimetres
		 * @param value The Yards input value
		 * @return The value in Centimetres
		 */
		public static double toCentimetres(double value) {
			return value * 91.44;
		}
		/**
		 * Converts the supplied Yards value to Metres
		 * @param value The Yards input value
		 * @return The value in Metres
		 */
		public static double toMetres(double value) {
			return value * 0.9144;
		}
		/**
		 * Converts the supplied Yards value to Kilometres
		 * @param value The Yards input value
		 * @return The value in Kilometres
		 */
		public static double toKilometres(double value) {
			return value * 0.0009144;
		}
		/**
		 * Converts the supplied Yards value to Inches
		 * @param value The Yards input value
		 * @return The value in Inches
		 */
		public static double toInches(double value) {
			return value * 36.0;
		}
		/**
		 * Converts the supplied Yards value to Feet
		 * @param value The Yards input value
		 * @return The value in Feet
		 */
		public static double toFeet(double value) {
			return value * 3.0;
		}
		/**
		 * Converts the supplied Yards value to Miles
		 * @param value The Yards input value
		 * @return The value in Miles
		 */
		public static double toMiles(double value) {
			return value / 1760.0;
		}
		/**
		 * Converts the supplied Yards value to Nautical Miles
		 * @param value The Yards input value
		 * @return The value in Nautical Miles
		 */
		public static double toNauticalMiles(double value) {
			return value / 2025.37;
		}
	}
}
