// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

package com.putridparrot.units;

import net.jqwik.api.constraints.DoubleRange;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import net.jqwik.api.*;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class DataStorageTests {
	@Property(tries = 100)
	public void testFromBitsToKilobitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Bits.toKilobits(value);
		final double convertBack = DataStorage.Kilobits.toBits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100.0,0.1","6021.0,6.021","9100.0,9.1" })
	public void testConvertKnownBitsToKilobits(double input, double expectation) {
		final double result = DataStorage.Bits.toKilobits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBitsToMegabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Bits.toMegabits(value);
		final double convertBack = DataStorage.Megabits.toBits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "9000000.0,9.0","123456.0,0.123456","1900000.0,1.9" })
	public void testConvertKnownBitsToMegabits(double input, double expectation) {
		final double result = DataStorage.Bits.toMegabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBitsToGigabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Bits.toGigabits(value);
		final double convertBack = DataStorage.Gigabits.toBits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "190000000.0,0.19","8009.0,8.009e-6","987654321.0,0.987654321" })
	public void testConvertKnownBitsToGigabits(double input, double expectation) {
		final double result = DataStorage.Bits.toGigabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBitsToTerabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Bits.toTerabits(value);
		final double convertBack = DataStorage.Terabits.toBits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "987654321234.0,0.987654321234","1234567890123456.0,1234.567890123455982","999888777666555.0,999.888777666555029" })
	public void testConvertKnownBitsToTerabits(double input, double expectation) {
		final double result = DataStorage.Bits.toTerabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBitsToKilobytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Bits.toKilobytes(value);
		final double convertBack = DataStorage.Kilobytes.toBits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "900.0,0.1125","12345.0,1.543125","6000.9,0.7501125" })
	public void testConvertKnownBitsToKilobytes(double input, double expectation) {
		final double result = DataStorage.Bits.toKilobytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBitsToMegabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Bits.toMegabytes(value);
		final double convertBack = DataStorage.Megabytes.toBits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123456.0,0.015432","900800.0,0.1126","999888777.0,124.986097125" })
	public void testConvertKnownBitsToMegabytes(double input, double expectation) {
		final double result = DataStorage.Bits.toMegabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBitsToGigabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Bits.toGigabytes(value);
		final double convertBack = DataStorage.Gigabytes.toBits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "999888777.0,0.124986097125","1.9e+9,0.2375","80090077.0,0.010011259625" })
	public void testConvertKnownBitsToGigabytes(double input, double expectation) {
		final double result = DataStorage.Bits.toGigabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBitsToTerabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Bits.toTerabytes(value);
		final double convertBack = DataStorage.Terabytes.toBits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "999888777666.0,0.12498609720825","12345678912345.0,1.5432098640431251","111999222888333.0,13.9999028610416243" })
	public void testConvertKnownBitsToTerabytes(double input, double expectation) {
		final double result = DataStorage.Bits.toTerabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBitsToKibibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Bits.toKibibits(value);
		final double convertBack = DataStorage.Kibibits.toBits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1800.0,1.757813","888.0,0.867188","7687.0,7.506836" })
	public void testConvertKnownBitsToKibibits(double input, double expectation) {
		final double result = DataStorage.Bits.toKibibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBitsToMebibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Bits.toMebibits(value);
		final double convertBack = DataStorage.Mebibits.toBits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "999888.0,0.953567505","1234567.0,1.17737484","900800.0,0.859069824" })
	public void testConvertKnownBitsToMebibits(double input, double expectation) {
		final double result = DataStorage.Bits.toMebibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabitsToBitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabits.toBits(value);
		final double convertBack = DataStorage.Bits.toGigabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.0009,900000.0","0.00007,70000.0","1.2e-5,12000.0" })
	public void testConvertKnownGigabitsToBits(double input, double expectation) {
		final double result = DataStorage.Gigabits.toBits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabitsToKilobitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabits.toKilobits(value);
		final double convertBack = DataStorage.Kilobits.toGigabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.01,10000.0","0.91,910000.0","6.1,6.1e+6" })
	public void testConvertKnownGigabitsToKilobits(double input, double expectation) {
		final double result = DataStorage.Gigabits.toKilobits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabitsToMegabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabits.toMegabits(value);
		final double convertBack = DataStorage.Megabits.toGigabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.1,6100.0","0.961,961.0","1.2e-3,1.2" })
	public void testConvertKnownGigabitsToMegabits(double input, double expectation) {
		final double result = DataStorage.Gigabits.toMegabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabitsToTerabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabits.toTerabits(value);
		final double convertBack = DataStorage.Terabits.toGigabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1200.0,1.2","90012.0,90.012","8000.0,8.0" })
	public void testConvertKnownGigabitsToTerabits(double input, double expectation) {
		final double result = DataStorage.Gigabits.toTerabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabitsToKilobytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabits.toKilobytes(value);
		final double convertBack = DataStorage.Kilobytes.toGigabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.2,150000.0","0.9,112500.0","0.001,125.0" })
	public void testConvertKnownGigabitsToKilobytes(double input, double expectation) {
		final double result = DataStorage.Gigabits.toKilobytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabitsToMegabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabits.toMegabytes(value);
		final double convertBack = DataStorage.Megabytes.toGigabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.9,112.5","1.2,150.0","80.1,10012.5" })
	public void testConvertKnownGigabitsToMegabytes(double input, double expectation) {
		final double result = DataStorage.Gigabits.toMegabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabitsToGigabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabits.toGigabytes(value);
		final double convertBack = DataStorage.Gigabytes.toGigabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "99.0,12.375","123.123,15.390375","8000.9,1000.1125" })
	public void testConvertKnownGigabitsToGigabytes(double input, double expectation) {
		final double result = DataStorage.Gigabits.toGigabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabitsToTerabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabits.toTerabytes(value);
		final double convertBack = DataStorage.Terabytes.toGigabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "9000.0,1.125","1234567.0,154.320875","613.0,0.076625" })
	public void testConvertKnownGigabitsToTerabytes(double input, double expectation) {
		final double result = DataStorage.Gigabits.toTerabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabitsToKibibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabits.toKibibits(value);
		final double convertBack = DataStorage.Kibibits.toGigabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.8,781250.0","0.012,11718.75","0.002,1953.125" })
	public void testConvertKnownGigabitsToKibibits(double input, double expectation) {
		final double result = DataStorage.Gigabits.toKibibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabitsToMebibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabits.toMebibits(value);
		final double convertBack = DataStorage.Mebibits.toGigabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.002,1.9073486","0.9,858.6","6.1,5819.4" })
	public void testConvertKnownGigabitsToMebibits(double input, double expectation) {
		final double result = DataStorage.Gigabits.toMebibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabytesToBitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabytes.toBits(value);
		final double convertBack = DataStorage.Bits.toGigabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.004,32000000.0","0.012,96000000","3e-9,24.0" })
	public void testConvertKnownGigabytesToBits(double input, double expectation) {
		final double result = DataStorage.Gigabytes.toBits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabytesToKilobitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabytes.toKilobits(value);
		final double convertBack = DataStorage.Kilobits.toGigabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.009,72000.0","1.2e-4,960.0","0.0078,62400.0" })
	public void testConvertKnownGigabytesToKilobits(double input, double expectation) {
		final double result = DataStorage.Gigabytes.toKilobits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabytesToMegabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabytes.toMegabits(value);
		final double convertBack = DataStorage.Megabits.toGigabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.0078,62.4","0.01,80.0","0.001234,9.872" })
	public void testConvertKnownGigabytesToMegabits(double input, double expectation) {
		final double result = DataStorage.Gigabytes.toMegabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabytesToGigabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabytes.toGigabits(value);
		final double convertBack = DataStorage.Gigabits.toGigabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "5.0,40.0","1.2,9.6","0.01,0.08" })
	public void testConvertKnownGigabytesToGigabits(double input, double expectation) {
		final double result = DataStorage.Gigabytes.toGigabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabytesToTerabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabytes.toTerabits(value);
		final double convertBack = DataStorage.Terabits.toGigabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "70.0,0.56","9001.0,72.008","768123.9,6144.9912" })
	public void testConvertKnownGigabytesToTerabits(double input, double expectation) {
		final double result = DataStorage.Gigabytes.toTerabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabytesToKilobytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabytes.toKilobytes(value);
		final double convertBack = DataStorage.Kilobytes.toGigabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.2,200000.0","0.009,9000.0","0.00123,1230.0" })
	public void testConvertKnownGigabytesToKilobytes(double input, double expectation) {
		final double result = DataStorage.Gigabytes.toKilobytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabytesToMegabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabytes.toMegabytes(value);
		final double convertBack = DataStorage.Megabytes.toGigabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.9,900.0","12.0,12000.0","35.6,35600.0" })
	public void testConvertKnownGigabytesToMegabytes(double input, double expectation) {
		final double result = DataStorage.Gigabytes.toMegabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabytesToTerabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabytes.toTerabytes(value);
		final double convertBack = DataStorage.Terabytes.toGigabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "35.6,0.0356","100.23,0.10023","900100.0,900.1" })
	public void testConvertKnownGigabytesToTerabytes(double input, double expectation) {
		final double result = DataStorage.Gigabytes.toTerabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabytesToKibibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabytes.toKibibits(value);
		final double convertBack = DataStorage.Kibibits.toGigabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.05,390625.0","0.008,62500.0","0.00123,9609.375" })
	public void testConvertKnownGigabytesToKibibits(double input, double expectation) {
		final double result = DataStorage.Gigabytes.toKibibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGigabytesToMebibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Gigabytes.toMebibits(value);
		final double convertBack = DataStorage.Mebibits.toGigabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.009,68.66451","1.2,9155.268","19.2,146484.288" })
	public void testConvertKnownGigabytesToMebibits(double input, double expectation) {
		final double result = DataStorage.Gigabytes.toMebibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKibibitsToBitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kibibits.toBits(value);
		final double convertBack = DataStorage.Bits.toKibibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "2.0,2048.0","9.0,9216.0","17.8,18227.2" })
	public void testConvertKnownKibibitsToBits(double input, double expectation) {
		final double result = DataStorage.Kibibits.toBits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKibibitsToKilobitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kibibits.toKilobits(value);
		final double convertBack = DataStorage.Kilobits.toKibibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.2,6.3488","0.9,0.9216","87.0,89.088" })
	public void testConvertKnownKibibitsToKilobits(double input, double expectation) {
		final double result = DataStorage.Kibibits.toKilobits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKibibitsToMegabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kibibits.toMegabits(value);
		final double convertBack = DataStorage.Megabits.toKibibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "87.0,0.089088","12.34,0.01263616","123456.0,126.418879" })
	public void testConvertKnownKibibitsToMegabits(double input, double expectation) {
		final double result = DataStorage.Kibibits.toMegabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKibibitsToGigabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kibibits.toGigabits(value);
		final double convertBack = DataStorage.Gigabits.toKibibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123456.0,0.126418944","8000000.0,8.192","1276876,1.307521024" })
	public void testConvertKnownKibibitsToGigabits(double input, double expectation) {
		final double result = DataStorage.Kibibits.toGigabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKibibitsToTerabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kibibits.toTerabits(value);
		final double convertBack = DataStorage.Terabits.toKibibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "800000000.0,0.8192","1.5e12,1536.0","9999999.0,0.01023999898" })
	public void testConvertKnownKibibitsToTerabits(double input, double expectation) {
		final double result = DataStorage.Kibibits.toTerabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKibibitsToKilobytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kibibits.toKilobytes(value);
		final double convertBack = DataStorage.Kilobytes.toKibibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "919.0,117.632","77.4,9.9072","109.109,13.965952" })
	public void testConvertKnownKibibitsToKilobytes(double input, double expectation) {
		final double result = DataStorage.Kibibits.toKilobytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKibibitsToMegabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kibibits.toMegabytes(value);
		final double convertBack = DataStorage.Megabytes.toKibibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1000.0,0.128","800.123,0.102415744","123456.0,15.802368" })
	public void testConvertKnownKibibitsToMegabytes(double input, double expectation) {
		final double result = DataStorage.Kibibits.toMegabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKibibitsToGigabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kibibits.toGigabytes(value);
		final double convertBack = DataStorage.Gigabytes.toKibibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12345678.0,1.580347926","8e12,1024000.00","1.2e5,0.01536" })
	public void testConvertKnownKibibitsToGigabytes(double input, double expectation) {
		final double result = DataStorage.Kibibits.toGigabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKibibitsToTerabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kibibits.toTerabytes(value);
		final double convertBack = DataStorage.Terabytes.toKibibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "120000000.0,0.01536","88e12,11264.0","9000000.0,0.009216" })
	public void testConvertKnownKibibitsToTerabytes(double input, double expectation) {
		final double result = DataStorage.Kibibits.toTerabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKibibitsToMebibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kibibits.toMebibits(value);
		final double convertBack = DataStorage.Mebibits.toKibibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "600.0,0.5859375","12345.0,12.055664","101.0,0.0986328" })
	public void testConvertKnownKibibitsToMebibits(double input, double expectation) {
		final double result = DataStorage.Kibibits.toMebibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobitsToBitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobits.toBits(value);
		final double convertBack = DataStorage.Bits.toKilobits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "9.0,9000.0","6.7,6700.0","1.2345,1234.5" })
	public void testConvertKnownKilobitsToBits(double input, double expectation) {
		final double result = DataStorage.Kilobits.toBits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobitsToMegabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobits.toMegabits(value);
		final double convertBack = DataStorage.Megabits.toKilobits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "900.0,0.9","12345.0,12.345","9988.0,9.988" })
	public void testConvertKnownKilobitsToMegabits(double input, double expectation) {
		final double result = DataStorage.Kilobits.toMegabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobitsToGigabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobits.toGigabits(value);
		final double convertBack = DataStorage.Gigabits.toKilobits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123456.0,0.123456","8000700.0,8.0007","191987578.0,191.987578" })
	public void testConvertKnownKilobitsToGigabits(double input, double expectation) {
		final double result = DataStorage.Kilobits.toGigabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobitsToTerabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobits.toTerabits(value);
		final double convertBack = DataStorage.Terabits.toKilobits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "191987578,0.191987578","9010081903.0,9.010081903","123456789.0,0.123456789" })
	public void testConvertKnownKilobitsToTerabits(double input, double expectation) {
		final double result = DataStorage.Kilobits.toTerabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobitsToKilobytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobits.toKilobytes(value);
		final double convertBack = DataStorage.Kilobytes.toKilobits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "80.0,10.0","15.67,1.95875","8007.09,1000.88625" })
	public void testConvertKnownKilobitsToKilobytes(double input, double expectation) {
		final double result = DataStorage.Kilobits.toKilobytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobitsToMegabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobits.toMegabytes(value);
		final double convertBack = DataStorage.Megabytes.toKilobits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123456.0,15.432","998877.0,124.859625","10090.0,1.26125" })
	public void testConvertKnownKilobitsToMegabytes(double input, double expectation) {
		final double result = DataStorage.Kilobits.toMegabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobitsToGigabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobits.toGigabytes(value);
		final double convertBack = DataStorage.Gigabytes.toKilobits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1828972.0,0.2286215","879860.8,0.1099826","78178971.0,9.772371375" })
	public void testConvertKnownKilobitsToGigabytes(double input, double expectation) {
		final double result = DataStorage.Kilobits.toGigabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobitsToTerabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobits.toTerabytes(value);
		final double convertBack = DataStorage.Terabytes.toKilobits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1234567891.0,0.154320986375","999999098.0,0.12499988725","84618364142.0,10.57729551775" })
	public void testConvertKnownKilobitsToTerabytes(double input, double expectation) {
		final double result = DataStorage.Kilobits.toTerabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobitsToKibibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobits.toKibibits(value);
		final double convertBack = DataStorage.Kibibits.toKilobits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "89.1,87.01172","7.1,6.93359","438.0,427.734" })
	public void testConvertKnownKilobitsToKibibits(double input, double expectation) {
		final double result = DataStorage.Kilobits.toKibibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobitsToMebibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobits.toMebibits(value);
		final double convertBack = DataStorage.Mebibits.toKilobits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "77790.0,74.186325","123456.0,117.736816","23972.0,22.861481" })
	public void testConvertKnownKilobitsToMebibits(double input, double expectation) {
		final double result = DataStorage.Kilobits.toMebibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobytesToBitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobytes.toBits(value);
		final double convertBack = DataStorage.Bits.toKilobytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123.456,987648.0","900.0,7.2e+6","100200.0,801600000" })
	public void testConvertKnownKilobytesToBits(double input, double expectation) {
		final double result = DataStorage.Kilobytes.toBits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobytesToKilobitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobytes.toKilobits(value);
		final double convertBack = DataStorage.Kilobits.toKilobytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.0,32.0","1.2,9.6","88.1,704.8" })
	public void testConvertKnownKilobytesToKilobits(double input, double expectation) {
		final double result = DataStorage.Kilobytes.toKilobits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobytesToMegabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobytes.toMegabits(value);
		final double convertBack = DataStorage.Megabits.toKilobytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "88.1,0.7048","7.1,0.0568","12.8,0.1024" })
	public void testConvertKnownKilobytesToMegabits(double input, double expectation) {
		final double result = DataStorage.Kilobytes.toMegabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobytesToGigabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobytes.toGigabits(value);
		final double convertBack = DataStorage.Gigabits.toKilobytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "10080.0,0.08064","4.5e+9,36000.0","271279.0,2.170232" })
	public void testConvertKnownKilobytesToGigabits(double input, double expectation) {
		final double result = DataStorage.Kilobytes.toGigabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobytesToTerabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobytes.toTerabits(value);
		final double convertBack = DataStorage.Terabits.toKilobytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "9009000.0,0.072072","7.2e9,57.6","100100100900.0,800.8008072" })
	public void testConvertKnownKilobytesToTerabits(double input, double expectation) {
		final double result = DataStorage.Kilobytes.toTerabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobytesToMegabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobytes.toMegabytes(value);
		final double convertBack = DataStorage.Megabytes.toKilobytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1009.0,1.009","8899.0,8.899","619.0,0.619" })
	public void testConvertKnownKilobytesToMegabytes(double input, double expectation) {
		final double result = DataStorage.Kilobytes.toMegabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobytesToGigabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobytes.toGigabytes(value);
		final double convertBack = DataStorage.Gigabytes.toKilobytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "900800.0,0.9008","1234567.0,1.234567","7.9e9,7900.0" })
	public void testConvertKnownKilobytesToGigabytes(double input, double expectation) {
		final double result = DataStorage.Kilobytes.toGigabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobytesToTerabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobytes.toTerabytes(value);
		final double convertBack = DataStorage.Terabytes.toKilobytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.9,9e-10","140000000,0.14","7.0,7e-9" })
	public void testConvertKnownKilobytesToTerabytes(double input, double expectation) {
		final double result = DataStorage.Kilobytes.toTerabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobytesToKibibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobytes.toKibibits(value);
		final double convertBack = DataStorage.Kibibits.toKilobytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.009,0.0703125","6e+3,46872.0","1.23,9.609375" })
	public void testConvertKnownKilobytesToKibibits(double input, double expectation) {
		final double result = DataStorage.Kilobytes.toKibibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilobytesToMebibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Kilobytes.toMebibits(value);
		final double convertBack = DataStorage.Mebibits.toKilobytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "70.0,0.534058","9.0,0.0686646","10022.0,76.461792" })
	public void testConvertKnownKilobytesToMebibits(double input, double expectation) {
		final double result = DataStorage.Kilobytes.toMebibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMebibitsToBitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Mebibits.toBits(value);
		final double convertBack = DataStorage.Bits.toMebibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.9,943718.4","0.006,6291.456","2.0,2097152.0" })
	public void testConvertKnownMebibitsToBits(double input, double expectation) {
		final double result = DataStorage.Mebibits.toBits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMebibitsToKilobitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Mebibits.toKilobits(value);
		final double convertBack = DataStorage.Kilobits.toMebibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.8,838.861","2.0,2097.15","0.23,241.1725" })
	public void testConvertKnownMebibitsToKilobits(double input, double expectation) {
		final double result = DataStorage.Mebibits.toKilobits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMebibitsToMegabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Mebibits.toMegabits(value);
		final double convertBack = DataStorage.Megabits.toMebibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.9,0.943718","12.3,12.89748","8.1,8.49347" })
	public void testConvertKnownMebibitsToMegabits(double input, double expectation) {
		final double result = DataStorage.Mebibits.toMegabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMebibitsToGigabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Mebibits.toGigabits(value);
		final double convertBack = DataStorage.Gigabits.toMebibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12345.0,12.944671","100.0,0.104858","999.9,1.0484711" })
	public void testConvertKnownMebibitsToGigabits(double input, double expectation) {
		final double result = DataStorage.Mebibits.toGigabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMebibitsToTerabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Mebibits.toTerabits(value);
		final double convertBack = DataStorage.Terabits.toMebibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100009.0,0.104867037","9876543.0,10.35630595","1000900.0,1.049519718" })
	public void testConvertKnownMebibitsToTerabits(double input, double expectation) {
		final double result = DataStorage.Mebibits.toTerabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMebibitsToKilobytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Mebibits.toKilobytes(value);
		final double convertBack = DataStorage.Kilobytes.toMebibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.0,524.288","1.45,190.0544","88.11,11548.754" })
	public void testConvertKnownMebibitsToKilobytes(double input, double expectation) {
		final double result = DataStorage.Mebibits.toKilobytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMebibitsToMegabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Mebibits.toMegabytes(value);
		final double convertBack = DataStorage.Megabytes.toMebibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "109.0,14.2868","55.67,7.2967782","45678.0,5987.1068" })
	public void testConvertKnownMebibitsToMegabytes(double input, double expectation) {
		final double result = DataStorage.Mebibits.toMegabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMebibitsToGigabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Mebibits.toGigabytes(value);
		final double convertBack = DataStorage.Gigabytes.toMebibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4000.0,0.524288311","90100.0,11.80959421","1009.0,0.132251727" })
	public void testConvertKnownMebibitsToGigabytes(double input, double expectation) {
		final double result = DataStorage.Mebibits.toGigabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMebibitsToTerabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Mebibits.toTerabytes(value);
		final double convertBack = DataStorage.Terabytes.toMebibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1000009.0,0.1310731796","90808080.0,11.902396662","5.2e12,681574.4" })
	public void testConvertKnownMebibitsToTerabytes(double input, double expectation) {
		final double result = DataStorage.Mebibits.toTerabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMebibitsToKibibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Mebibits.toKibibits(value);
		final double convertBack = DataStorage.Kibibits.toMebibits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "5.0,5120.0","1234.56,1264189.44","505.0,517120.0" })
	public void testConvertKnownMebibitsToKibibits(double input, double expectation) {
		final double result = DataStorage.Mebibits.toKibibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabitsToBitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabits.toBits(value);
		final double convertBack = DataStorage.Bits.toMegabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.34,340000.0","9.12,9120000.0","0.987,987000.0" })
	public void testConvertKnownMegabitsToBits(double input, double expectation) {
		final double result = DataStorage.Megabits.toBits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabitsToKilobitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabits.toKilobits(value);
		final double convertBack = DataStorage.Kilobits.toMegabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.77,770.0","5.0,5000.0","0.987,987.0" })
	public void testConvertKnownMegabitsToKilobits(double input, double expectation) {
		final double result = DataStorage.Megabits.toKilobits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabitsToGigabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabits.toGigabits(value);
		final double convertBack = DataStorage.Gigabits.toMegabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "900.0,0.9","12345.0,12.345","189.1,0.1891" })
	public void testConvertKnownMegabitsToGigabits(double input, double expectation) {
		final double result = DataStorage.Megabits.toGigabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabitsToTerabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabits.toTerabits(value);
		final double convertBack = DataStorage.Terabits.toMegabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100200300.0,100.2003","99887777.0,99.887777","80009.0,0.080009" })
	public void testConvertKnownMegabitsToTerabits(double input, double expectation) {
		final double result = DataStorage.Megabits.toTerabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabitsToKilobytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabits.toKilobytes(value);
		final double convertBack = DataStorage.Kilobytes.toMegabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "9.0,1125.0","1.23,153.75","98.1,12262.5" })
	public void testConvertKnownMegabitsToKilobytes(double input, double expectation) {
		final double result = DataStorage.Megabits.toKilobytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabitsToMegabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabits.toMegabytes(value);
		final double convertBack = DataStorage.Megabytes.toMegabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "98.1,12.2625","10.9,1.3625","888.123,111.015375" })
	public void testConvertKnownMegabitsToMegabytes(double input, double expectation) {
		final double result = DataStorage.Megabits.toMegabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabitsToGigabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabits.toGigabytes(value);
		final double convertBack = DataStorage.Gigabytes.toMegabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "900.0,0.1125","10123.0,1.265375","9988.0,1.2485" })
	public void testConvertKnownMegabitsToGigabytes(double input, double expectation) {
		final double result = DataStorage.Megabits.toGigabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabitsToTerabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabits.toTerabytes(value);
		final double convertBack = DataStorage.Terabytes.toMegabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "998877.0,0.124859625","100200400.0,12.5250375","9008877.0,1.126109625" })
	public void testConvertKnownMegabitsToTerabytes(double input, double expectation) {
		final double result = DataStorage.Megabits.toTerabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabitsToKibibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabits.toKibibits(value);
		final double convertBack = DataStorage.Kibibits.toMegabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,11718.756","0.9,878.906","1.23,1201.172" })
	public void testConvertKnownMegabitsToKibibits(double input, double expectation) {
		final double result = DataStorage.Megabits.toKibibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabitsToMebibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabits.toMebibits(value);
		final double convertBack = DataStorage.Mebibits.toMegabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.5,4.29153","0.8,0.762939","900.0,858.307" })
	public void testConvertKnownMegabitsToMebibits(double input, double expectation) {
		final double result = DataStorage.Megabits.toMebibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabytesToBitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabytes.toBits(value);
		final double convertBack = DataStorage.Bits.toMegabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.04,320000.0","0.0091,72800.0","3e-5,240.0" })
	public void testConvertKnownMegabytesToBits(double input, double expectation) {
		final double result = DataStorage.Megabytes.toBits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabytesToKilobitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabytes.toKilobits(value);
		final double convertBack = DataStorage.Kilobits.toMegabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.0,48000.0","0.3,2400.0","0.009,72.0" })
	public void testConvertKnownMegabytesToKilobits(double input, double expectation) {
		final double result = DataStorage.Megabytes.toKilobits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabytesToMegabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabytes.toMegabits(value);
		final double convertBack = DataStorage.Megabits.toMegabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "3.0,24.0","0.9,7.2","13.0,104.0" })
	public void testConvertKnownMegabytesToMegabits(double input, double expectation) {
		final double result = DataStorage.Megabytes.toMegabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabytesToGigabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabytes.toGigabits(value);
		final double convertBack = DataStorage.Gigabits.toMegabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "13.0,0.104","900.0,7.2","18000.0,144.0" })
	public void testConvertKnownMegabytesToGigabits(double input, double expectation) {
		final double result = DataStorage.Megabytes.toGigabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabytesToTerabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabytes.toTerabits(value);
		final double convertBack = DataStorage.Terabits.toMegabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "18000.0,0.144","9718290.0,77.74632","9e12,72000000.0" })
	public void testConvertKnownMegabytesToTerabits(double input, double expectation) {
		final double result = DataStorage.Megabytes.toTerabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabytesToKilobytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabytes.toKilobytes(value);
		final double convertBack = DataStorage.Kilobytes.toMegabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.0,6000.0","0.9,900.0","123.4,123400.0" })
	public void testConvertKnownMegabytesToKilobytes(double input, double expectation) {
		final double result = DataStorage.Megabytes.toKilobytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabytesToGigabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabytes.toGigabytes(value);
		final double convertBack = DataStorage.Gigabytes.toMegabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123.4,0.1234","900.0,0.9","8e6,8000.0" })
	public void testConvertKnownMegabytesToGigabytes(double input, double expectation) {
		final double result = DataStorage.Megabytes.toGigabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabytesToTerabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabytes.toTerabytes(value);
		final double convertBack = DataStorage.Terabytes.toMegabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "80000.0,0.08","12345678.0,12.345678","900800.0,0.9008" })
	public void testConvertKnownMegabytesToTerabytes(double input, double expectation) {
		final double result = DataStorage.Megabytes.toTerabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabytesToKibibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabytes.toKibibits(value);
		final double convertBack = DataStorage.Kibibits.toMegabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.0,46875.0","0.9,7031.25","0.03,234.375" })
	public void testConvertKnownMegabytesToKibibits(double input, double expectation) {
		final double result = DataStorage.Megabytes.toKibibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMegabytesToMebibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Megabytes.toMebibits(value);
		final double convertBack = DataStorage.Mebibits.toMegabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.03,0.2288818","4.5,34.3323","80.1,611.1145" })
	public void testConvertKnownMegabytesToMebibits(double input, double expectation) {
		final double result = DataStorage.Megabytes.toMebibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabitsToBitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabits.toBits(value);
		final double convertBack = DataStorage.Bits.toTerabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.0007,700000000.0","1.23e-6,1230000.0","0.00098,980000000.0" })
	public void testConvertKnownTerabitsToBits(double input, double expectation) {
		final double result = DataStorage.Terabits.toBits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabitsToKilobitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabits.toKilobits(value);
		final double convertBack = DataStorage.Kilobits.toTerabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.001,1000000.0","6.1e-6,6100.0","0.00009,90000.0" })
	public void testConvertKnownTerabitsToKilobits(double input, double expectation) {
		final double result = DataStorage.Terabits.toKilobits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabitsToMegabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabits.toMegabits(value);
		final double convertBack = DataStorage.Megabits.toTerabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.09,90000.0","3.5e-4,350.0","0.0123,12300.0" })
	public void testConvertKnownTerabitsToMegabits(double input, double expectation) {
		final double result = DataStorage.Terabits.toMegabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabitsToGigabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabits.toGigabits(value);
		final double convertBack = DataStorage.Gigabits.toTerabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.9,900.0","1.45,1450.0","8.19,8190.0" })
	public void testConvertKnownTerabitsToGigabits(double input, double expectation) {
		final double result = DataStorage.Terabits.toGigabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabitsToKilobytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabits.toKilobytes(value);
		final double convertBack = DataStorage.Kilobytes.toTerabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.0009,112500.0","3.14e-6,392.5","0.001,125000.0" })
	public void testConvertKnownTerabitsToKilobytes(double input, double expectation) {
		final double result = DataStorage.Terabits.toKilobytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabitsToMegabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabits.toMegabytes(value);
		final double convertBack = DataStorage.Megabytes.toTerabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.4,50000.0","3.9e-3,487.5","0.007,875.0" })
	public void testConvertKnownTerabitsToMegabytes(double input, double expectation) {
		final double result = DataStorage.Terabits.toMegabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabitsToGigabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabits.toGigabytes(value);
		final double convertBack = DataStorage.Gigabytes.toTerabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.009,1.125","0.00123,0.15375","8.1e-3,1.0125" })
	public void testConvertKnownTerabitsToGigabytes(double input, double expectation) {
		final double result = DataStorage.Terabits.toGigabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabitsToTerabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabits.toTerabytes(value);
		final double convertBack = DataStorage.Terabytes.toTerabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.3,0.0375","14.0,1.75","0.8,0.1" })
	public void testConvertKnownTerabitsToTerabytes(double input, double expectation) {
		final double result = DataStorage.Terabits.toTerabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabitsToKibibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabits.toKibibits(value);
		final double convertBack = DataStorage.Kibibits.toTerabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.0009,878906.25","6.1e-6,5957.031","12e-9,11.71875" })
	public void testConvertKnownTerabitsToKibibits(double input, double expectation) {
		final double result = DataStorage.Terabits.toKibibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabitsToMebibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabits.toMebibits(value);
		final double convertBack = DataStorage.Mebibits.toTerabits(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.9,858306.59999","4.6e-3,4386.9","0.00123,1173.0194092" })
	public void testConvertKnownTerabitsToMebibits(double input, double expectation) {
		final double result = DataStorage.Terabits.toMebibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabytesToBitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabytes.toBits(value);
		final double convertBack = DataStorage.Bits.toTerabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.00008,640000000.0","1.2e-12,9.6","9.0,7.2e+13" })
	public void testConvertKnownTerabytesToBits(double input, double expectation) {
		final double result = DataStorage.Terabytes.toBits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabytesToKilobitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabytes.toKilobits(value);
		final double convertBack = DataStorage.Kilobits.toTerabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.009,72000000.0","1.4e-6,11200.0","6.1e-5,488000.0" })
	public void testConvertKnownTerabytesToKilobits(double input, double expectation) {
		final double result = DataStorage.Terabytes.toKilobits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabytesToMegabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabytes.toMegabits(value);
		final double convertBack = DataStorage.Megabits.toTerabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.005,40000.0","0.000123,984.0","0.00006,480.0" })
	public void testConvertKnownTerabytesToMegabits(double input, double expectation) {
		final double result = DataStorage.Terabytes.toMegabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabytesToGigabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabytes.toGigabits(value);
		final double convertBack = DataStorage.Gigabits.toTerabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.008,64.0","3e-7,0.0024","0.00023,1.84" })
	public void testConvertKnownTerabytesToGigabits(double input, double expectation) {
		final double result = DataStorage.Terabytes.toGigabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabytesToTerabitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabytes.toTerabits(value);
		final double convertBack = DataStorage.Terabits.toTerabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "5.0,40.0","1.23,9.84","800.0,6400.0" })
	public void testConvertKnownTerabytesToTerabits(double input, double expectation) {
		final double result = DataStorage.Terabytes.toTerabits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabytesToKilobytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabytes.toKilobytes(value);
		final double convertBack = DataStorage.Kilobytes.toTerabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.0009,900000.0","3.14e-7,314.0","0.00063,630000.0" })
	public void testConvertKnownTerabytesToKilobytes(double input, double expectation) {
		final double result = DataStorage.Terabytes.toKilobytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabytesToMegabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabytes.toMegabytes(value);
		final double convertBack = DataStorage.Megabytes.toTerabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.009,9000.0","0.234,234000.0","2.0,2e+6" })
	public void testConvertKnownTerabytesToMegabytes(double input, double expectation) {
		final double result = DataStorage.Terabytes.toMegabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabytesToGigabytesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabytes.toGigabytes(value);
		final double convertBack = DataStorage.Gigabytes.toTerabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "2.7,2700.0","0.9,900.0","0.0123,12.3" })
	public void testConvertKnownTerabytesToGigabytes(double input, double expectation) {
		final double result = DataStorage.Terabytes.toGigabytes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabytesToKibibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabytes.toKibibits(value);
		final double convertBack = DataStorage.Kibibits.toTerabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.0009,7031250.0","1.23e-5,96093.75","0.0001,781250.0" })
	public void testConvertKnownTerabytesToKibibits(double input, double expectation) {
		final double result = DataStorage.Terabytes.toKibibits(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTerabytesToMebibitsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = DataStorage.Terabytes.toMebibits(value);
		final double convertBack = DataStorage.Mebibits.toTerabytes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.01,76293.95","0.008,61035.156","2.0,15258789.0625" })
	public void testConvertKnownTerabytesToMebibits(double input, double expectation) {
		final double result = DataStorage.Terabytes.toMebibits(input);
		assertEquals(expectation, result, 0.01);
	}

}
