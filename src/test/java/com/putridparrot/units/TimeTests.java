// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

package com.putridparrot.units;

import net.jqwik.api.constraints.DoubleRange;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import net.jqwik.api.*;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class TimeTests {
	@Property(tries = 100)
	public void testFromCenturiesToSecondsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Centuries.toSeconds(value);
		final double convertBack = Time.Seconds.toCenturies(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromCenturiesToMinutesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Centuries.toMinutes(value);
		final double convertBack = Time.Minutes.toCenturies(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromCenturiesToHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Centuries.toHours(value);
		final double convertBack = Time.Hours.toCenturies(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromCenturiesToDaysAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Centuries.toDays(value);
		final double convertBack = Time.Days.toCenturies(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromCenturiesToWeeksAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Centuries.toWeeks(value);
		final double convertBack = Time.Weeks.toCenturies(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromCenturiesToMonthsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Centuries.toMonths(value);
		final double convertBack = Time.Months.toCenturies(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromCenturiesToYearsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Centuries.toYears(value);
		final double convertBack = Time.Years.toCenturies(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromCenturiesToDecadesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Centuries.toDecades(value);
		final double convertBack = Time.Decades.toCenturies(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromDaysToSecondsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Days.toSeconds(value);
		final double convertBack = Time.Seconds.toDays(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.4,120960.0","0.06,5184.0","0.2,17280.0" })
	public void testConvertKnownDaysToSeconds(double input, double expectation) {
		final double result = Time.Days.toSeconds(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromDaysToMinutesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Days.toMinutes(value);
		final double convertBack = Time.Minutes.toDays(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "34.0,48960.0","0.06,86.4","8.1,11664.0" })
	public void testConvertKnownDaysToMinutes(double input, double expectation) {
		final double result = Time.Days.toMinutes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromDaysToHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Days.toHours(value);
		final double convertBack = Time.Hours.toDays(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "8.1,194.4","0.2,4.8","121.0,2904.0" })
	public void testConvertKnownDaysToHours(double input, double expectation) {
		final double result = Time.Days.toHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromDaysToWeeksAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Days.toWeeks(value);
		final double convertBack = Time.Weeks.toDays(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "121.0,17.2857","7.2,1.02857","0.9,0.128571" })
	public void testConvertKnownDaysToWeeks(double input, double expectation) {
		final double result = Time.Days.toWeeks(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromDaysToMonthsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Days.toMonths(value);
		final double convertBack = Time.Months.toDays(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.9,0.029589","108.0,3.55068","55.0,1.80822" })
	public void testConvertKnownDaysToMonths(double input, double expectation) {
		final double result = Time.Days.toMonths(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromDaysToYearsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Days.toYears(value);
		final double convertBack = Time.Years.toDays(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "55.0,0.150685","123.0,0.336986","900.0,2.46575" })
	public void testConvertKnownDaysToYears(double input, double expectation) {
		final double result = Time.Days.toYears(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromDaysToDecadesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Days.toDecades(value);
		final double convertBack = Time.Decades.toDays(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromDaysToCenturiesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Days.toCenturies(value);
		final double convertBack = Time.Centuries.toDays(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromDecadesToSecondsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Decades.toSeconds(value);
		final double convertBack = Time.Seconds.toDecades(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromDecadesToMinutesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Decades.toMinutes(value);
		final double convertBack = Time.Minutes.toDecades(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromDecadesToHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Decades.toHours(value);
		final double convertBack = Time.Hours.toDecades(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromDecadesToDaysAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Decades.toDays(value);
		final double convertBack = Time.Days.toDecades(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromDecadesToWeeksAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Decades.toWeeks(value);
		final double convertBack = Time.Weeks.toDecades(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromDecadesToMonthsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Decades.toMonths(value);
		final double convertBack = Time.Months.toDecades(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromDecadesToYearsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Decades.toYears(value);
		final double convertBack = Time.Years.toDecades(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromDecadesToCenturiesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Decades.toCenturies(value);
		final double convertBack = Time.Centuries.toDecades(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromHoursToSecondsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Hours.toSeconds(value);
		final double convertBack = Time.Seconds.toHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,43200.0","3.2,11520.0","0.3,1080.0" })
	public void testConvertKnownHoursToSeconds(double input, double expectation) {
		final double result = Time.Hours.toSeconds(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromHoursToMinutesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Hours.toMinutes(value);
		final double convertBack = Time.Minutes.toHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.3,18.0","700.0,42000.0","4.8,288.0" })
	public void testConvertKnownHoursToMinutes(double input, double expectation) {
		final double result = Time.Hours.toMinutes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromHoursToDaysAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Hours.toDays(value);
		final double convertBack = Time.Days.toHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.8,0.2","190.0,7.91667","8.5,0.354167" })
	public void testConvertKnownHoursToDays(double input, double expectation) {
		final double result = Time.Hours.toDays(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromHoursToWeeksAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Hours.toWeeks(value);
		final double convertBack = Time.Weeks.toHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "800.0,4.7619","90.0,0.535714","102.0,0.607143" })
	public void testConvertKnownHoursToWeeks(double input, double expectation) {
		final double result = Time.Hours.toWeeks(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromHoursToMonthsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Hours.toMonths(value);
		final double convertBack = Time.Months.toHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "102.0,0.139726","9876.0,13.52875","100.8,0.13808204" })
	public void testConvertKnownHoursToMonths(double input, double expectation) {
		final double result = Time.Hours.toMonths(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromHoursToYearsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Hours.toYears(value);
		final double convertBack = Time.Years.toHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "9000.0,1.027397","1003.0,0.1144977","809.0,0.0923516" })
	public void testConvertKnownHoursToYears(double input, double expectation) {
		final double result = Time.Hours.toYears(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromHoursToDecadesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Hours.toDecades(value);
		final double convertBack = Time.Decades.toHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromHoursToCenturiesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Hours.toCenturies(value);
		final double convertBack = Time.Centuries.toHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromMinutesToSecondsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Minutes.toSeconds(value);
		final double convertBack = Time.Seconds.toMinutes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "90.0,5400.0","0.9,54.0","123.0,7380.0" })
	public void testConvertKnownMinutesToSeconds(double input, double expectation) {
		final double result = Time.Minutes.toSeconds(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMinutesToHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Minutes.toHours(value);
		final double convertBack = Time.Hours.toMinutes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123.0,2.05","77.0,1.28333","0.8,0.0133333" })
	public void testConvertKnownMinutesToHours(double input, double expectation) {
		final double result = Time.Minutes.toHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMinutesToDaysAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Minutes.toDays(value);
		final double convertBack = Time.Days.toMinutes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "800.0,0.555556","190.0,0.131944","55.0,0.0381944" })
	public void testConvertKnownMinutesToDays(double input, double expectation) {
		final double result = Time.Minutes.toDays(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMinutesToWeeksAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Minutes.toWeeks(value);
		final double convertBack = Time.Weeks.toMinutes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1900.0,0.1884921","800.0,0.0793651","12345.0,1.2247024" })
	public void testConvertKnownMinutesToWeeks(double input, double expectation) {
		final double result = Time.Minutes.toWeeks(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMinutesToMonthsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Minutes.toMonths(value);
		final double convertBack = Time.Months.toMinutes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1234.0,0.02817349","90000.0,2.0547923","7100.0,0.1621003" })
	public void testConvertKnownMinutesToMonths(double input, double expectation) {
		final double result = Time.Minutes.toMonths(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMinutesToYearsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Minutes.toYears(value);
		final double convertBack = Time.Years.toMinutes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "900800.0,1.71385084","12345.0,0.023487443","610910.0,1.16230974" })
	public void testConvertKnownMinutesToYears(double input, double expectation) {
		final double result = Time.Minutes.toYears(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMinutesToDecadesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Minutes.toDecades(value);
		final double convertBack = Time.Decades.toMinutes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromMinutesToCenturiesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Minutes.toCenturies(value);
		final double convertBack = Time.Centuries.toMinutes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromMonthsToSecondsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Months.toSeconds(value);
		final double convertBack = Time.Seconds.toMonths(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.03,78840.00","0.1,262800.0","0.008,21024.0" })
	public void testConvertKnownMonthsToSeconds(double input, double expectation) {
		final double result = Time.Months.toSeconds(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMonthsToMinutesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Months.toMinutes(value);
		final double convertBack = Time.Minutes.toMonths(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.7,30660.0","1.4,61319.99","5.0,219000.0" })
	public void testConvertKnownMonthsToMinutes(double input, double expectation) {
		final double result = Time.Months.toMinutes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMonthsToHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Months.toHours(value);
		final double convertBack = Time.Hours.toMonths(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.0,2920.0","0.3,219.0","4.5,3285.0" })
	public void testConvertKnownMonthsToHours(double input, double expectation) {
		final double result = Time.Months.toHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMonthsToDaysAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Months.toDays(value);
		final double convertBack = Time.Days.toMonths(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.5,136.875","90.0,2737.5029","0.4,12.1667" })
	public void testConvertKnownMonthsToDays(double input, double expectation) {
		final double result = Time.Months.toDays(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMonthsToWeeksAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Months.toWeeks(value);
		final double convertBack = Time.Weeks.toMonths(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.5,2.17262","88.0,382.381120","12.6,54.75006" })
	public void testConvertKnownMonthsToWeeks(double input, double expectation) {
		final double result = Time.Months.toWeeks(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMonthsToYearsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Months.toYears(value);
		final double convertBack = Time.Years.toMonths(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.6,1.050001","109.0,9.08334","23.0,1.91667" })
	public void testConvertKnownMonthsToYears(double input, double expectation) {
		final double result = Time.Months.toYears(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMonthsToDecadesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Months.toDecades(value);
		final double convertBack = Time.Decades.toMonths(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromMonthsToCenturiesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Months.toCenturies(value);
		final double convertBack = Time.Centuries.toMonths(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromSecondsToMinutesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Seconds.toMinutes(value);
		final double convertBack = Time.Minutes.toSeconds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100.0,1.66667","9000.0,150.0","2300.0,38.33333" })
	public void testConvertKnownSecondsToMinutes(double input, double expectation) {
		final double result = Time.Seconds.toMinutes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromSecondsToHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Seconds.toHours(value);
		final double convertBack = Time.Hours.toSeconds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "2300.0,0.6388889","9999.0,2.7775","36000.0,10.0" })
	public void testConvertKnownSecondsToHours(double input, double expectation) {
		final double result = Time.Seconds.toHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromSecondsToDaysAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Seconds.toDays(value);
		final double convertBack = Time.Days.toSeconds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "36000.0,0.41666667","90000.0,1.0416667","190000.0,2.19907407" })
	public void testConvertKnownSecondsToDays(double input, double expectation) {
		final double result = Time.Seconds.toDays(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromSecondsToWeeksAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Seconds.toWeeks(value);
		final double convertBack = Time.Weeks.toSeconds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "190000.0,0.314153439","1234567.0,2.041281415","100200.0,0.165674603" })
	public void testConvertKnownSecondsToWeeks(double input, double expectation) {
		final double result = Time.Seconds.toWeeks(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromSecondsToMonthsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Seconds.toMonths(value);
		final double convertBack = Time.Months.toSeconds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1000000.0,0.380517087","9876543.0,3.75819337","200900.0,0.0764458827" })
	public void testConvertKnownSecondsToMonths(double input, double expectation) {
		final double result = Time.Seconds.toMonths(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromSecondsToYearsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Seconds.toYears(value);
		final double convertBack = Time.Years.toSeconds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123456789.0,3.91478909817","100900.0,0.00319951801","987654.0,0.0313183029" })
	public void testConvertKnownSecondsToYears(double input, double expectation) {
		final double result = Time.Seconds.toYears(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromSecondsToDecadesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Seconds.toDecades(value);
		final double convertBack = Time.Decades.toSeconds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromSecondsToCenturiesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Seconds.toCenturies(value);
		final double convertBack = Time.Centuries.toSeconds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromWeeksToSecondsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Weeks.toSeconds(value);
		final double convertBack = Time.Seconds.toWeeks(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.1,60480.0","0.08,48384.0","3.0,1814400.0" })
	public void testConvertKnownWeeksToSeconds(double input, double expectation) {
		final double result = Time.Weeks.toSeconds(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromWeeksToMinutesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Weeks.toMinutes(value);
		final double convertBack = Time.Minutes.toWeeks(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "2.0,20160.0","0.4,4032.0","0.02,201.6" })
	public void testConvertKnownWeeksToMinutes(double input, double expectation) {
		final double result = Time.Weeks.toMinutes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromWeeksToHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Weeks.toHours(value);
		final double convertBack = Time.Hours.toWeeks(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.02,3.36","77.0,12936.0","9.2,1545.6" })
	public void testConvertKnownWeeksToHours(double input, double expectation) {
		final double result = Time.Weeks.toHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromWeeksToDaysAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Weeks.toDays(value);
		final double convertBack = Time.Days.toWeeks(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "9.2,64.4","169.0,1183.0","4.0,28.0" })
	public void testConvertKnownWeeksToDays(double input, double expectation) {
		final double result = Time.Weeks.toDays(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromWeeksToMonthsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Weeks.toMonths(value);
		final double convertBack = Time.Months.toWeeks(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.0,0.920547","900.0,207.12319687","3.8,0.87452" })
	public void testConvertKnownWeeksToMonths(double input, double expectation) {
		final double result = Time.Weeks.toMonths(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromWeeksToYearsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Weeks.toYears(value);
		final double convertBack = Time.Years.toWeeks(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "3.0,0.0575342","235.0,4.50685","1090.0,20.90411" })
	public void testConvertKnownWeeksToYears(double input, double expectation) {
		final double result = Time.Weeks.toYears(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromWeeksToDecadesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Weeks.toDecades(value);
		final double convertBack = Time.Decades.toWeeks(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromWeeksToCenturiesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Weeks.toCenturies(value);
		final double convertBack = Time.Centuries.toWeeks(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromYearsToSecondsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Years.toSeconds(value);
		final double convertBack = Time.Seconds.toYears(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.06,1892160.0","0.009,283824.0","0.02,630720.0" })
	public void testConvertKnownYearsToSeconds(double input, double expectation) {
		final double result = Time.Years.toSeconds(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromYearsToMinutesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Years.toMinutes(value);
		final double convertBack = Time.Minutes.toYears(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.02,10512.0","0.3,157680.0","0.001,525.6" })
	public void testConvertKnownYearsToMinutes(double input, double expectation) {
		final double result = Time.Years.toMinutes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromYearsToHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Years.toHours(value);
		final double convertBack = Time.Hours.toYears(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.001,8.76","0.3,2628.0","2.0,17520.0" })
	public void testConvertKnownYearsToHours(double input, double expectation) {
		final double result = Time.Years.toHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromYearsToDaysAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Years.toDays(value);
		final double convertBack = Time.Days.toYears(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "2.0,730.0","1009.0,368285.0","7.0,2555.0" })
	public void testConvertKnownYearsToDays(double input, double expectation) {
		final double result = Time.Years.toDays(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromYearsToWeeksAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Years.toWeeks(value);
		final double convertBack = Time.Weeks.toYears(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "7.0,365.0","1.3,67.7857","88.0,4588.5839" })
	public void testConvertKnownYearsToWeeks(double input, double expectation) {
		final double result = Time.Years.toWeeks(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromYearsToMonthsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Years.toMonths(value);
		final double convertBack = Time.Months.toYears(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.0,71.9999","12.0,144.0","0.3,3.6" })
	public void testConvertKnownYearsToMonths(double input, double expectation) {
		final double result = Time.Years.toMonths(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromYearsToDecadesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Years.toDecades(value);
		final double convertBack = Time.Decades.toYears(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@Property(tries = 100)
	public void testFromYearsToCenturiesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Time.Years.toCenturies(value);
		final double convertBack = Time.Centuries.toYears(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

}
