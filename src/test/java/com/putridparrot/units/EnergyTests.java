// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

package com.putridparrot.units;

import org.junit.jupiter.api.Nested;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class EnergyTests {
	@Nested
	public class BtuTests {
		@ParameterizedTest
		@CsvSource({ "100.0,105.506","987.65,1042.03","555666.0,586258.6917293" })
		public void testConvertKnownBtuToKilojoules(double input, double expectation) {
			final double result = Energy.Btu.toKilojoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "67.9,17.12196","109.9,27.712868","5000.0,1260.716" })
		public void testConvertKnownBtuToKilocalories(double input, double expectation) {
			final double result = Energy.Btu.toKilocalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "5.0,5275.3","912.9,963164.274","109.0,115001.54" })
		public void testConvertKnownBtuToJoules(double input, double expectation) {
			final double result = Energy.Btu.toJoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "56.0,14121.184","123.0,31016.172","0.9,226.9476" })
		public void testConvertKnownBtuToCalories(double input, double expectation) {
			final double result = Energy.Btu.toCalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "12000.0,0.120028657","9876.5,0.098788586","666.999,0.006671583" })
		public void testConvertKnownBtuToUSTherms(double input, double expectation) {
			final double result = Energy.Btu.toUSTherms(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "900.0,263.764","125.7,36.839034","0.99,0.2901404" })
		public void testConvertKnownBtuToWattHours(double input, double expectation) {
			final double result = Energy.Btu.toWattHours(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "9000.0,2.63764","12345.0,3.6179624","8090.8,2.37117941" })
		public void testConvertKnownBtuToKilowattHours(double input, double expectation) {
			final double result = Energy.Btu.toKilowattHours(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "189.0,147073.9409","0.3,233.451","2.6,2023.24" })
		public void testConvertKnownBtuToFootPounds(double input, double expectation) {
			final double result = Energy.Btu.toFootPounds(input);
			assertEquals(expectation, result, 0.01);
		}

	}
	@Nested
	public class CaloriesTests {
		@ParameterizedTest
		@CsvSource({ "109.0,0.456056","12.3,0.0514632","9876.0,41.32118" })
		public void testConvertKnownCaloriesToKilojoules(double input, double expectation) {
			final double result = Energy.Calories.toKilojoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "900.0,0.9","1782.0,1.782","900800.0,900.8" })
		public void testConvertKnownCaloriesToKilocalories(double input, double expectation) {
			final double result = Energy.Calories.toKilocalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "98.0,410.032","1.67,6.98728","55.0,230.12" })
		public void testConvertKnownCaloriesToJoules(double input, double expectation) {
			final double result = Energy.Calories.toJoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "550.0,2.18112","1234.0,4.893633","900.9,3.5726692" })
		public void testConvertKnownCaloriesToBtu(double input, double expectation) {
			final double result = Energy.Calories.toBtu(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "9000000.0,0.356995242","12e6,0.475993657","100200300.0,3.974558932" })
		public void testConvertKnownCaloriesToUSTherms(double input, double expectation) {
			final double result = Energy.Calories.toUSTherms(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "600.0,0.697333","1234.5,1.43476333","88.7,0.1030891" })
		public void testConvertKnownCaloriesToWattHours(double input, double expectation) {
			final double result = Energy.Calories.toWattHours(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "100900.0,0.117268222","987654.0,1.14787343","506012.0,0.588098391" })
		public void testConvertKnownCaloriesToKilowattHours(double input, double expectation) {
			final double result = Energy.Calories.toKilowattHours(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "123.0,379.573","9.01,27.8045","2.8,8.64069" })
		public void testConvertKnownCaloriesToFootPounds(double input, double expectation) {
			final double result = Energy.Calories.toFootPounds(input);
			assertEquals(expectation, result, 0.01);
		}

	}
	@Nested
	public class FootPoundsTests {
		@ParameterizedTest
		@CsvSource({ "190.0,0.257605","4.6,0.00623676","123.8,0.16785026" })
		public void testConvertKnownFootPoundsToKilojoules(double input, double expectation) {
			final double result = Energy.FootPounds.toKilojoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "1999.0,0.6477725","890.8,0.2886622","12000.0,3.8885792" })
		public void testConvertKnownFootPoundsToKilocalories(double input, double expectation) {
			final double result = Energy.FootPounds.toKilocalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "190.0,257.605","23.4,31.72614","9.2,12.4735" })
		public void testConvertKnownFootPoundsToJoules(double input, double expectation) {
			final double result = Energy.FootPounds.toJoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "9000.0,11.56561","45.6,0.05859908","1996.0,2.564995" })
		public void testConvertKnownFootPoundsToBtu(double input, double expectation) {
			final double result = Energy.FootPounds.toBtu(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "123.0,39.8579","54.7,17.72544","109.2,35.386071" })
		public void testConvertKnownFootPoundsToCalories(double input, double expectation) {
			final double result = Energy.FootPounds.toCalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "19000000.0,0.24422111613","1234567.0,0.01586880688","100200300.0,1.28794890016" })
		public void testConvertKnownFootPoundsToUSTherms(double input, double expectation) {
			final double result = Energy.FootPounds.toUSTherms(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "44.0,0.0165711","9080.0,3.419674","1200.0,0.4519393" })
		public void testConvertKnownFootPoundsToWattHours(double input, double expectation) {
			final double result = Energy.FootPounds.toWattHours(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "900000.0,0.338954487","100200.0,0.0377369329","9876543.0,3.719665074" })
		public void testConvertKnownFootPoundsToKilowattHours(double input, double expectation) {
			final double result = Energy.FootPounds.toKilowattHours(input);
			assertEquals(expectation, result, 0.01);
		}

	}
	@Nested
	public class JoulesTests {
		@ParameterizedTest
		@CsvSource({ "790.0,0.79","800100.0,800.1","509.2,0.5092" })
		public void testConvertKnownJoulesToKilojoules(double input, double expectation) {
			final double result = Energy.Joules.toKilojoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "790.0,0.188815","125.9,0.030090822","8000.0,1.912046" })
		public void testConvertKnownJoulesToKilocalories(double input, double expectation) {
			final double result = Energy.Joules.toKilocalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "500.0,0.473909","1910.0,1.810331","67000.1,63.50384184" })
		public void testConvertKnownJoulesToBtu(double input, double expectation) {
			final double result = Energy.Joules.toBtu(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "67.0,16.0134","909.0,217.256","190.0,45.4111" })
		public void testConvertKnownJoulesToCalories(double input, double expectation) {
			final double result = Energy.Joules.toCalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "100090000.0,0.948896667059","55.7e6,0.52806018938","1234567890.0,11.70423974501" })
		public void testConvertKnownJoulesToUSTherms(double input, double expectation) {
			final double result = Energy.Joules.toUSTherms(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "56000.0,15.555556","890.0,0.247222","22001.0,6.1113889" })
		public void testConvertKnownJoulesToWattHours(double input, double expectation) {
			final double result = Energy.Joules.toWattHours(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "560000.8,0.1555557","1234567.0,0.3429352778","900100.0,0.250027778" })
		public void testConvertKnownJoulesToKilowattHours(double input, double expectation) {
			final double result = Energy.Joules.toKilowattHours(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "900.0,663.806","10.2,7.523134","6.7,4.94167" })
		public void testConvertKnownJoulesToFootPounds(double input, double expectation) {
			final double result = Energy.Joules.toFootPounds(input);
			assertEquals(expectation, result, 0.01);
		}

	}
	@Nested
	public class KilocaloriesTests {
		@ParameterizedTest
		@CsvSource({ "67.0,280.328","4.5,18.828","100.3,419.6552" })
		public void testConvertKnownKilocaloriesToKilojoules(double input, double expectation) {
			final double result = Energy.Kilocalories.toKilojoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "100.3,419655.2","0.9,3765.6","3.4,14225.6" })
		public void testConvertKnownKilocaloriesToJoules(double input, double expectation) {
			final double result = Energy.Kilocalories.toJoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "3.4,13.4833","109.0,432.2940","22.89,90.774114" })
		public void testConvertKnownKilocaloriesToBtu(double input, double expectation) {
			final double result = Energy.Kilocalories.toBtu(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "22.8,22800.0","76.23,76230.0","0.07,70.0" })
		public void testConvertKnownKilocaloriesToCalories(double input, double expectation) {
			final double result = Energy.Kilocalories.toCalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "12345.0,0.4896388","90002.0,3.5700317","180180.0,7.14704457" })
		public void testConvertKnownKilocaloriesToUSTherms(double input, double expectation) {
			final double result = Energy.Kilocalories.toUSTherms(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "89.0,103.438","23.6,27.42844","0.9,1.046" })
		public void testConvertKnownKilocaloriesToWattHours(double input, double expectation) {
			final double result = Energy.Kilocalories.toWattHours(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "456.0,0.529973","1090.8,1.267752","567.1,0.65909622" })
		public void testConvertKnownKilocaloriesToKilowattHours(double input, double expectation) {
			final double result = Energy.Kilocalories.toKilowattHours(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "109.0,336369.64","0.5,1542.98","2.4,7406.3" })
		public void testConvertKnownKilocaloriesToFootPounds(double input, double expectation) {
			final double result = Energy.Kilocalories.toFootPounds(input);
			assertEquals(expectation, result, 0.01);
		}

	}
	@Nested
	public class KilojoulesTests {
		@ParameterizedTest
		@CsvSource({ "199.0,47.5621","0.67,0.1601338","4.7,1.12333" })
		public void testConvertKnownKilojoulesToKilocalories(double input, double expectation) {
			final double result = Energy.Kilojoules.toKilocalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "4.7,4700.0","7.8,7800.0","1800.0,1800000.0" })
		public void testConvertKnownKilojoulesToJoules(double input, double expectation) {
			final double result = Energy.Kilojoules.toJoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "1800.0,1706.070","1.4,1.32694","89.2,84.54529" })
		public void testConvertKnownKilojoulesToBtu(double input, double expectation) {
			final double result = Energy.Kilojoules.toBtu(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "67.0,16013.381899","1.4,334.608","87.0,20793.5" })
		public void testConvertKnownKilojoulesToCalories(double input, double expectation) {
			final double result = Energy.Kilojoules.toCalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "123456.0,1.17041649","88000.0,0.83427822","9000.0,0.08532391" })
		public void testConvertKnownKilojoulesToUSTherms(double input, double expectation) {
			final double result = Energy.Kilojoules.toUSTherms(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "98000.0,27222.222","1.5,0.416667","67.9,18.86111" })
		public void testConvertKnownKilojoulesToWattHours(double input, double expectation) {
			final double result = Energy.Kilojoules.toWattHours(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "8000.0,2.222222","67.99,0.018886111","406.8,0.113" })
		public void testConvertKnownKilojoulesToKilowattHours(double input, double expectation) {
			final double result = Energy.Kilojoules.toKilowattHours(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "100.9,74420.00579","2.4,1770.15","0.9,663.806" })
		public void testConvertKnownKilojoulesToFootPounds(double input, double expectation) {
			final double result = Energy.Kilojoules.toFootPounds(input);
			assertEquals(expectation, result, 0.01);
		}

	}
	@Nested
	public class KilowattHoursTests {
		@ParameterizedTest
		@CsvSource({ "0.6,2160.0","134.0,482400.0","45.6,164160.0" })
		public void testConvertKnownKilowattHoursToKilojoules(double input, double expectation) {
			final double result = Energy.KilowattHours.toKilojoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "45.6,39235.1976","12.0,10325.052","0.4,344.168" })
		public void testConvertKnownKilowattHoursToKilocalories(double input, double expectation) {
			final double result = Energy.KilowattHours.toKilocalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "0.01,36000.0","0.009,32400.0","2.0,7.2e+6" })
		public void testConvertKnownKilowattHoursToJoules(double input, double expectation) {
			final double result = Energy.KilowattHours.toJoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "2.0,6824.28","0.7,2388.4979","0.02,68.24283" })
		public void testConvertKnownKilowattHoursToBtu(double input, double expectation) {
			final double result = Energy.KilowattHours.toBtu(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "0.1,86042.1","0.07,60229.47","0.0123,10583.174" })
		public void testConvertKnownKilowattHoursToCalories(double input, double expectation) {
			final double result = Energy.KilowattHours.toCalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "5.0,0.170648","234.0,7.98632","1001.0,34.16369" })
		public void testConvertKnownKilowattHoursToUSTherms(double input, double expectation) {
			final double result = Energy.KilowattHours.toUSTherms(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "123.0,123000.0","98.4,98400.0","1.6,1600.0" })
		public void testConvertKnownKilowattHoursToWattHours(double input, double expectation) {
			final double result = Energy.KilowattHours.toWattHours(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "0.001,2655.196219","0.09,238967.6597","0.0006,1593.1177314" })
		public void testConvertKnownKilowattHoursToFootPounds(double input, double expectation) {
			final double result = Energy.KilowattHours.toFootPounds(input);
			assertEquals(expectation, result, 0.01);
		}

	}
	@Nested
	public class USThermsTests {
		@ParameterizedTest
		@CsvSource({ "0.009,949.3236","3.0,316440.12","1.9,200412.075" })
		public void testConvertKnownUSThermsToKilojoules(double input, double expectation) {
			final double result = Energy.USTherms.toKilojoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "1.1,27731.44","0.04,1008.417","0.0123,310.088174" })
		public void testConvertKnownUSThermsToKilocalories(double input, double expectation) {
			final double result = Energy.USTherms.toKilocalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "0.008,843843.2","3.4e-6,358.633","0.00678,715157.112" })
		public void testConvertKnownUSThermsToJoules(double input, double expectation) {
			final double result = Energy.USTherms.toJoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "0.00666,665.8409891","2.0,199952.249","0.9,89978.51204" })
		public void testConvertKnownUSThermsToBtu(double input, double expectation) {
			final double result = Energy.USTherms.toBtu(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "0.003,75631.262","6.8e-3,171430.856","0.0008,20168.3365" })
		public void testConvertKnownUSThermsToCalories(double input, double expectation) {
			final double result = Energy.USTherms.toCalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "6.0,175800.59","1.9,55670.189","0.07,2051.008" })
		public void testConvertKnownUSThermsToWattHours(double input, double expectation) {
			final double result = Energy.USTherms.toWattHours(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "0.9,26.3701","7.9,231.471","1.4,41.0202" })
		public void testConvertKnownUSThermsToKilowattHours(double input, double expectation) {
			final double result = Energy.USTherms.toKilowattHours(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "0.009,700352.43389267","0.02,1556338.74198","0.0003,23345.081129" })
		public void testConvertKnownUSThermsToFootPounds(double input, double expectation) {
			final double result = Energy.USTherms.toFootPounds(input);
			assertEquals(expectation, result, 0.01);
		}

	}
	@Nested
	public class WattHoursTests {
		@ParameterizedTest
		@CsvSource({ "1.6,5.76","67.0,241.2","8.12,29.232" })
		public void testConvertKnownWattHoursToKilojoules(double input, double expectation) {
			final double result = Energy.WattHours.toKilojoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "8.12,6.986616","170.0,146.272","19.2,16.52008" })
		public void testConvertKnownWattHoursToKilocalories(double input, double expectation) {
			final double result = Energy.WattHours.toKilocalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "6.7,24120.0","12.34,44424.0","0.09,324.0" })
		public void testConvertKnownWattHoursToJoules(double input, double expectation) {
			final double result = Energy.WattHours.toJoules(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "34.0,116.013","179.2,611.45578","0.9,3.07093" })
		public void testConvertKnownWattHoursToBtu(double input, double expectation) {
			final double result = Energy.WattHours.toBtu(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "0.2,172.084","0.09,77.43786","12.0,10325.06754" })
		public void testConvertKnownWattHoursToCalories(double input, double expectation) {
			final double result = Energy.WattHours.toCalories(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "1090.0,0.03720122","49990.0,1.7061369","900800.0,30.7439107" })
		public void testConvertKnownWattHoursToUSTherms(double input, double expectation) {
			final double result = Energy.WattHours.toUSTherms(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "98.0,0.098","12.5,0.0125","0.6,0.0006" })
		public void testConvertKnownWattHoursToKilowattHours(double input, double expectation) {
			final double result = Energy.WattHours.toKilowattHours(input);
			assertEquals(expectation, result, 0.01);
		}

		@ParameterizedTest
		@CsvSource({ "1.5,3982.829","0.3,796.567","90.1,239235.3219" })
		public void testConvertKnownWattHoursToFootPounds(double input, double expectation) {
			final double result = Energy.WattHours.toFootPounds(input);
			assertEquals(expectation, result, 0.01);
		}

	}
}
