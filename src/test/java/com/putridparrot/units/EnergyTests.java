// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

package com.putridparrot.units;

import net.jqwik.api.constraints.DoubleRange;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import net.jqwik.api.*;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class EnergyTests {
	@Property(tries = 100)
	public void testFromBtuToKilojoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Btu.toKilojoules(value);
		final double convertBack = Energy.Kilojoules.toBtu(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100.0,105.506","987.65,1042.03","555666.0,586258.6917293" })
	public void testConvertKnownBtuToKilojoules(double input, double expectation) {
		final double result = Energy.Btu.toKilojoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBtuToKilocaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Btu.toKilocalories(value);
		final double convertBack = Energy.Kilocalories.toBtu(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "67.9,17.12196","109.9,27.7009516484","5000.0,1260.279874814" })
	public void testConvertKnownBtuToKilocalories(double input, double expectation) {
		final double result = Energy.Btu.toKilocalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBtuToJoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Btu.toJoules(value);
		final double convertBack = Energy.Joules.toBtu(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "5.0,5275.3","912.9,963164.274","109.0,115001.54" })
	public void testConvertKnownBtuToJoules(double input, double expectation) {
		final double result = Energy.Btu.toJoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBtuToCaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Btu.toCalories(value);
		final double convertBack = Energy.Calories.toBtu(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "56.0,14121.184","123.0,31016.172","0.9,226.9476" })
	public void testConvertKnownBtuToCalories(double input, double expectation) {
		final double result = Energy.Btu.toCalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBtuToUSThermsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Btu.toUSTherms(value);
		final double convertBack = Energy.USTherms.toBtu(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12000.0,0.120028657","9876.5,0.098788586","666.999,0.006671583" })
	public void testConvertKnownBtuToUSTherms(double input, double expectation) {
		final double result = Energy.Btu.toUSTherms(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBtuToWattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Btu.toWattHours(value);
		final double convertBack = Energy.WattHours.toBtu(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "900.0,263.764","125.7,36.839034","0.99,0.2901404" })
	public void testConvertKnownBtuToWattHours(double input, double expectation) {
		final double result = Energy.Btu.toWattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBtuToKilowattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Btu.toKilowattHours(value);
		final double convertBack = Energy.KilowattHours.toBtu(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "9000.0,2.63764","12345.0,3.6179624","8090.8,2.37117941" })
	public void testConvertKnownBtuToKilowattHours(double input, double expectation) {
		final double result = Energy.Btu.toKilowattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBtuToFootPoundsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Btu.toFootPounds(value);
		final double convertBack = Energy.FootPounds.toBtu(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "189.0,147073.9409","0.3,233.451","2.6,2023.24" })
	public void testConvertKnownBtuToFootPounds(double input, double expectation) {
		final double result = Energy.Btu.toFootPounds(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromBtuToElectronvoltsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Btu.toElectronvolts(value);
		final double convertBack = Energy.Electronvolts.toBtu(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.0000000789,519567655294184.88","0.000001002,6598311667994592.0","0.000000001,6585141385224.14" })
	public void testConvertKnownBtuToElectronvolts(double input, double expectation) {
		final double result = Energy.Btu.toElectronvolts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromCaloriesToKilojoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Calories.toKilojoules(value);
		final double convertBack = Energy.Kilojoules.toCalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "109.0,0.456056","12.3,0.0514632","9876.0,41.32118" })
	public void testConvertKnownCaloriesToKilojoules(double input, double expectation) {
		final double result = Energy.Calories.toKilojoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromCaloriesToKilocaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Calories.toKilocalories(value);
		final double convertBack = Energy.Kilocalories.toCalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "900.0,0.9","1782.0,1.782","900800.0,900.8" })
	public void testConvertKnownCaloriesToKilocalories(double input, double expectation) {
		final double result = Energy.Calories.toKilocalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromCaloriesToJoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Calories.toJoules(value);
		final double convertBack = Energy.Joules.toCalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "98.0,410.032","1.67,6.98728","55.0,230.12" })
	public void testConvertKnownCaloriesToJoules(double input, double expectation) {
		final double result = Energy.Calories.toJoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromCaloriesToBtuAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Calories.toBtu(value);
		final double convertBack = Energy.Btu.toCalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "550.0,2.18112","1234.0,4.893633","900.9,3.5726692" })
	public void testConvertKnownCaloriesToBtu(double input, double expectation) {
		final double result = Energy.Calories.toBtu(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromCaloriesToUSThermsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Calories.toUSTherms(value);
		final double convertBack = Energy.USTherms.toCalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "9000000.0,0.356995242","12e6,0.475993657","100200300.0,3.974558932" })
	public void testConvertKnownCaloriesToUSTherms(double input, double expectation) {
		final double result = Energy.Calories.toUSTherms(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromCaloriesToWattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Calories.toWattHours(value);
		final double convertBack = Energy.WattHours.toCalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "600.0,0.697333","1234.5,1.43476333","88.7,0.1030891" })
	public void testConvertKnownCaloriesToWattHours(double input, double expectation) {
		final double result = Energy.Calories.toWattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromCaloriesToKilowattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Calories.toKilowattHours(value);
		final double convertBack = Energy.KilowattHours.toCalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100900.0,0.117268222","987654.0,1.14787343","506012.0,0.588098391" })
	public void testConvertKnownCaloriesToKilowattHours(double input, double expectation) {
		final double result = Energy.Calories.toKilowattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromCaloriesToFootPoundsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Calories.toFootPounds(value);
		final double convertBack = Energy.FootPounds.toCalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123.0,379.573","9.01,27.8045","2.8,8.64069" })
	public void testConvertKnownCaloriesToFootPounds(double input, double expectation) {
		final double result = Energy.Calories.toFootPounds(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromCaloriesToElectronvoltsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Calories.toElectronvolts(value);
		final double convertBack = Energy.Electronvolts.toCalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.0000091,237800626261534.66","0.0008,20905549561453600.0","0.00123,32142282450734908.0" })
	public void testConvertKnownCaloriesToElectronvolts(double input, double expectation) {
		final double result = Energy.Calories.toElectronvolts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromElectronvoltsToKilojoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Electronvolts.toKilojoules(value);
		final double convertBack = Energy.Kilojoules.toElectronvolts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123456789.0,1.9779957413e-14","900900900.0,1.4434023094e-13","123456789123456789.0,1.977995743237493669e-5" })
	public void testConvertKnownElectronvoltsToKilojoules(double input, double expectation) {
		final double result = Energy.Electronvolts.toKilojoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromElectronvoltsToKilocaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Electronvolts.toKilocalories(value);
		final double convertBack = Energy.Kilocalories.toElectronvolts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100200300400.0,1.6053857310684e-11","123456789.0,1.9779957413e-14","900800700600.0,1.4432417722369e-10" })
	public void testConvertKnownElectronvoltsToKilocalories(double input, double expectation) {
		final double result = Energy.Electronvolts.toKilocalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromElectronvoltsToJoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Electronvolts.toJoules(value);
		final double convertBack = Energy.Joules.toElectronvolts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123456789123.0,1.9779957432302e-8","900800700600.0,1.4432417722369e-7","999888777666.0,1.601998367183e-7" })
	public void testConvertKnownElectronvoltsToJoules(double input, double expectation) {
		final double result = Energy.Electronvolts.toJoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromElectronvoltsToBtuAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Electronvolts.toBtu(value);
		final double convertBack = Energy.Btu.toElectronvolts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100020003000100020003000.0,15.188741377060267723","999888777666999888777666.0,151.84014791315084381","12345678912341234567891234.0,1874.7782293466862029" })
	public void testConvertKnownElectronvoltsToBtu(double input, double expectation) {
		final double result = Energy.Electronvolts.toBtu(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromElectronvoltsToCaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Electronvolts.toCalories(value);
		final double convertBack = Energy.Calories.toElectronvolts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "666333111999.0,2.5515853167503e-8","999888777666555.0,3.8288679904011702e-5","12345678901234.0,4.727523282641506e-7" })
	public void testConvertKnownElectronvoltsToCalories(double input, double expectation) {
		final double result = Energy.Electronvolts.toCalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromElectronvoltsToUSThermsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Electronvolts.toUSTherms(value);
		final double convertBack = Energy.USTherms.toElectronvolts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "666333111999.0,1.0118737258101e-10","999888777666555.0,1.5184014791308327e-7","12345678901234.0,1.874778227659974e-9" })
	public void testConvertKnownElectronvoltsToUSTherms(double input, double expectation) {
		final double result = Energy.Electronvolts.toUSTherms(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromElectronvoltsToWattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Electronvolts.toWattHours(value);
		final double convertBack = Energy.WattHours.toElectronvolts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100900700100.0,4.490576030342e-12","9000800070006000.0,4.00579748289276988e-7","12345678987654321.0,5.494432653620188248e-7" })
	public void testConvertKnownElectronvoltsToWattHours(double input, double expectation) {
		final double result = Energy.Electronvolts.toWattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromElectronvoltsToKilowattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Electronvolts.toKilowattHours(value);
		final double convertBack = Energy.KilowattHours.toElectronvolts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100900700100.0,4.490576030342e-15","999988887777.0,4.4504410034909e-14","12345678987654321.0,5.494432653620187834e-10" })
	public void testConvertKnownElectronvoltsToKilowattHours(double input, double expectation) {
		final double result = Energy.Electronvolts.toKilowattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromElectronvoltsToFootPoundsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Electronvolts.toFootPounds(value);
		final double convertBack = Energy.FootPounds.toElectronvolts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100900700100.0,1.1923484070355e-8","999988887777.0,1.1816916594359e-7","12345678987654321.0,0.0014588948005427860004" })
	public void testConvertKnownElectronvoltsToFootPounds(double input, double expectation) {
		final double result = Energy.Electronvolts.toFootPounds(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFootPoundsToKilojoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.FootPounds.toKilojoules(value);
		final double convertBack = Energy.Kilojoules.toFootPounds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "190.0,0.257605","4.6,0.00623676","123.8,0.16785026" })
	public void testConvertKnownFootPoundsToKilojoules(double input, double expectation) {
		final double result = Energy.FootPounds.toKilojoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFootPoundsToKilocaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.FootPounds.toKilocalories(value);
		final double convertBack = Energy.Kilocalories.toFootPounds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1999.0,0.6477725","890.8,0.2886622","12000.0,3.8885792" })
	public void testConvertKnownFootPoundsToKilocalories(double input, double expectation) {
		final double result = Energy.FootPounds.toKilocalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFootPoundsToJoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.FootPounds.toJoules(value);
		final double convertBack = Energy.Joules.toFootPounds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "190.0,257.605","23.4,31.72614","9.2,12.4735" })
	public void testConvertKnownFootPoundsToJoules(double input, double expectation) {
		final double result = Energy.FootPounds.toJoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFootPoundsToBtuAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.FootPounds.toBtu(value);
		final double convertBack = Energy.Btu.toFootPounds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "9000.0,11.56561","45.6,0.05859908","1996.0,2.564995" })
	public void testConvertKnownFootPoundsToBtu(double input, double expectation) {
		final double result = Energy.FootPounds.toBtu(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFootPoundsToCaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.FootPounds.toCalories(value);
		final double convertBack = Energy.Calories.toFootPounds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123.0,39.8579","54.7,17.72544","109.2,35.386071" })
	public void testConvertKnownFootPoundsToCalories(double input, double expectation) {
		final double result = Energy.FootPounds.toCalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFootPoundsToUSThermsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.FootPounds.toUSTherms(value);
		final double convertBack = Energy.USTherms.toFootPounds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "19000000.0,0.24422111613","1234567.0,0.01586880688","100200300.0,1.28794890016" })
	public void testConvertKnownFootPoundsToUSTherms(double input, double expectation) {
		final double result = Energy.FootPounds.toUSTherms(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFootPoundsToWattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.FootPounds.toWattHours(value);
		final double convertBack = Energy.WattHours.toFootPounds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "44.0,0.0165711","9080.0,3.419674","1200.0,0.4519393" })
	public void testConvertKnownFootPoundsToWattHours(double input, double expectation) {
		final double result = Energy.FootPounds.toWattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFootPoundsToKilowattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.FootPounds.toKilowattHours(value);
		final double convertBack = Energy.KilowattHours.toFootPounds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "900000.0,0.338954487","100200.0,0.0377369329","9876543.0,3.719665074" })
	public void testConvertKnownFootPoundsToKilowattHours(double input, double expectation) {
		final double result = Energy.FootPounds.toKilowattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFootPoundsToElectronvoltsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.FootPounds.toElectronvolts(value);
		final double convertBack = Energy.Electronvolts.toFootPounds(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.00123,10408691651641586.0","0.0009,7616115842664575.0","0.00000888,75145676314290.469" })
	public void testConvertKnownFootPoundsToElectronvolts(double input, double expectation) {
		final double result = Energy.FootPounds.toElectronvolts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromJoulesToKilojoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Joules.toKilojoules(value);
		final double convertBack = Energy.Kilojoules.toJoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "790.0,0.79","800100.0,800.1","509.2,0.5092" })
	public void testConvertKnownJoulesToKilojoules(double input, double expectation) {
		final double result = Energy.Joules.toKilojoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromJoulesToKilocaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Joules.toKilocalories(value);
		final double convertBack = Energy.Kilocalories.toJoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "790.0,0.188815","125.9,0.030090822","8000.0,1.912046" })
	public void testConvertKnownJoulesToKilocalories(double input, double expectation) {
		final double result = Energy.Joules.toKilocalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromJoulesToBtuAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Joules.toBtu(value);
		final double convertBack = Energy.Btu.toJoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "500.0,0.473909","1910.0,1.810331","67000.1,63.50384184" })
	public void testConvertKnownJoulesToBtu(double input, double expectation) {
		final double result = Energy.Joules.toBtu(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromJoulesToCaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Joules.toCalories(value);
		final double convertBack = Energy.Calories.toJoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "67.0,16.0134","909.0,217.256","190.0,45.4111" })
	public void testConvertKnownJoulesToCalories(double input, double expectation) {
		final double result = Energy.Joules.toCalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromJoulesToUSThermsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Joules.toUSTherms(value);
		final double convertBack = Energy.USTherms.toJoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100090000.0,0.948896667059","55.7e6,0.52806018938","1234567890.0,11.70423974501" })
	public void testConvertKnownJoulesToUSTherms(double input, double expectation) {
		final double result = Energy.Joules.toUSTherms(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromJoulesToWattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Joules.toWattHours(value);
		final double convertBack = Energy.WattHours.toJoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "56000.0,15.555556","890.0,0.247222","22001.0,6.1113889" })
	public void testConvertKnownJoulesToWattHours(double input, double expectation) {
		final double result = Energy.Joules.toWattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromJoulesToKilowattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Joules.toKilowattHours(value);
		final double convertBack = Energy.KilowattHours.toJoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "560000.8,0.1555557","1234567.0,0.3429352778","900100.0,0.250027778" })
	public void testConvertKnownJoulesToKilowattHours(double input, double expectation) {
		final double result = Energy.Joules.toKilowattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromJoulesToFootPoundsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Joules.toFootPounds(value);
		final double convertBack = Energy.FootPounds.toJoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "900.0,663.806","10.2,7.523134","6.7,4.94167" })
	public void testConvertKnownJoulesToFootPounds(double input, double expectation) {
		final double result = Energy.Joules.toFootPounds(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromJoulesToElectronvoltsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Joules.toElectronvolts(value);
		final double convertBack = Energy.Electronvolts.toJoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.00000888,55424602968504.0","0.00001234,77020225296322.0","0.00000666,41568452226378.0" })
	public void testConvertKnownJoulesToElectronvolts(double input, double expectation) {
		final double result = Energy.Joules.toElectronvolts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilocaloriesToKilojoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilocalories.toKilojoules(value);
		final double convertBack = Energy.Kilojoules.toKilocalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "67.0,280.328","4.5,18.828","100.3,419.6552" })
	public void testConvertKnownKilocaloriesToKilojoules(double input, double expectation) {
		final double result = Energy.Kilocalories.toKilojoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilocaloriesToJoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilocalories.toJoules(value);
		final double convertBack = Energy.Joules.toKilocalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100.3,419655.2","0.9,3765.6","3.4,14225.6" })
	public void testConvertKnownKilocaloriesToJoules(double input, double expectation) {
		final double result = Energy.Kilocalories.toJoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilocaloriesToBtuAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilocalories.toBtu(value);
		final double convertBack = Energy.Btu.toKilocalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "3.4,13.4833","109.0,432.4436269206","22.89,90.8131616" })
	public void testConvertKnownKilocaloriesToBtu(double input, double expectation) {
		final double result = Energy.Kilocalories.toBtu(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilocaloriesToCaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilocalories.toCalories(value);
		final double convertBack = Energy.Calories.toKilocalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "22.8,22800.0","76.23,76230.0","0.07,70.0" })
	public void testConvertKnownKilocaloriesToCalories(double input, double expectation) {
		final double result = Energy.Kilocalories.toCalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilocaloriesToUSThermsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilocalories.toUSTherms(value);
		final double convertBack = Energy.USTherms.toKilocalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12345.0,0.4896388","90002.0,3.5700317","180180.0,7.14704457" })
	public void testConvertKnownKilocaloriesToUSTherms(double input, double expectation) {
		final double result = Energy.Kilocalories.toUSTherms(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilocaloriesToWattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilocalories.toWattHours(value);
		final double convertBack = Energy.WattHours.toKilocalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "89.0,103.438","23.6,27.42844","0.9,1.046" })
	public void testConvertKnownKilocaloriesToWattHours(double input, double expectation) {
		final double result = Energy.Kilocalories.toWattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilocaloriesToKilowattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilocalories.toKilowattHours(value);
		final double convertBack = Energy.KilowattHours.toKilocalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "456.0,0.529973","1090.8,1.267752","567.1,0.65909622" })
	public void testConvertKnownKilocaloriesToKilowattHours(double input, double expectation) {
		final double result = Energy.Kilocalories.toKilowattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilocaloriesToFootPoundsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilocalories.toFootPounds(value);
		final double convertBack = Energy.FootPounds.toKilocalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "109.0,336369.64","0.5,1542.98","2.4,7406.3" })
	public void testConvertKnownKilocaloriesToFootPounds(double input, double expectation) {
		final double result = Energy.Kilocalories.toFootPounds(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilocaloriesToElectronvoltsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilocalories.toElectronvolts(value);
		final double convertBack = Energy.Electronvolts.toKilocalories(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.0000000666,1740388069688132.2","0.000002,52263905996640608.0","0.000000999,26105821045321988.0" })
	public void testConvertKnownKilocaloriesToElectronvolts(double input, double expectation) {
		final double result = Energy.Kilocalories.toElectronvolts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilojoulesToKilocaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilojoules.toKilocalories(value);
		final double convertBack = Energy.Kilocalories.toKilojoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "199.0,47.5621","0.67,0.1601338","4.7,1.12333" })
	public void testConvertKnownKilojoulesToKilocalories(double input, double expectation) {
		final double result = Energy.Kilojoules.toKilocalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilojoulesToJoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilojoules.toJoules(value);
		final double convertBack = Energy.Joules.toKilojoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.7,4700.0","7.8,7800.0","1800.0,1800000.0" })
	public void testConvertKnownKilojoulesToJoules(double input, double expectation) {
		final double result = Energy.Kilojoules.toJoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilojoulesToBtuAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilojoules.toBtu(value);
		final double convertBack = Energy.Btu.toKilojoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1800.0,1706.070","1.4,1.32694","89.2,84.54529" })
	public void testConvertKnownKilojoulesToBtu(double input, double expectation) {
		final double result = Energy.Kilojoules.toBtu(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilojoulesToCaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilojoules.toCalories(value);
		final double convertBack = Energy.Calories.toKilojoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "67.0,16013.381899","1.4,334.608","87.0,20793.5" })
	public void testConvertKnownKilojoulesToCalories(double input, double expectation) {
		final double result = Energy.Kilojoules.toCalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilojoulesToUSThermsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilojoules.toUSTherms(value);
		final double convertBack = Energy.USTherms.toKilojoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123456.0,1.17041649","88000.0,0.83427822","9000.0,0.08532391" })
	public void testConvertKnownKilojoulesToUSTherms(double input, double expectation) {
		final double result = Energy.Kilojoules.toUSTherms(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilojoulesToWattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilojoules.toWattHours(value);
		final double convertBack = Energy.WattHours.toKilojoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "98000.0,27222.222","1.5,0.416667","67.9,18.86111" })
	public void testConvertKnownKilojoulesToWattHours(double input, double expectation) {
		final double result = Energy.Kilojoules.toWattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilojoulesToKilowattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilojoules.toKilowattHours(value);
		final double convertBack = Energy.KilowattHours.toKilojoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "8000.0,2.222222","67.99,0.018886111","406.8,0.113" })
	public void testConvertKnownKilojoulesToKilowattHours(double input, double expectation) {
		final double result = Energy.Kilojoules.toKilowattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilojoulesToFootPoundsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilojoules.toFootPounds(value);
		final double convertBack = Energy.FootPounds.toKilojoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100.9,74420.00579","2.4,1770.15","0.9,663.806" })
	public void testConvertKnownKilojoulesToFootPounds(double input, double expectation) {
		final double result = Energy.Kilojoules.toFootPounds(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilojoulesToElectronvoltsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.Kilojoules.toElectronvolts(value);
		final double convertBack = Energy.Electronvolts.toKilojoules(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.000000999,6235268234766989.0","0.0000002,1248301948902300.0","0.00567,3.5389360251380204E+19" })
	public void testConvertKnownKilojoulesToElectronvolts(double input, double expectation) {
		final double result = Energy.Kilojoules.toElectronvolts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilowattHoursToKilojoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.KilowattHours.toKilojoules(value);
		final double convertBack = Energy.Kilojoules.toKilowattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.6,2160.0","134.0,482400.0","45.6,164160.0" })
	public void testConvertKnownKilowattHoursToKilojoules(double input, double expectation) {
		final double result = Energy.KilowattHours.toKilojoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilowattHoursToKilocaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.KilowattHours.toKilocalories(value);
		final double convertBack = Energy.Kilocalories.toKilowattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "45.6,39235.1976","12.0,10325.052","0.4,344.168" })
	public void testConvertKnownKilowattHoursToKilocalories(double input, double expectation) {
		final double result = Energy.KilowattHours.toKilocalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilowattHoursToJoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.KilowattHours.toJoules(value);
		final double convertBack = Energy.Joules.toKilowattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.01,36000.0","0.009,32400.0","2.0,7.2e+6" })
	public void testConvertKnownKilowattHoursToJoules(double input, double expectation) {
		final double result = Energy.KilowattHours.toJoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilowattHoursToBtuAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.KilowattHours.toBtu(value);
		final double convertBack = Energy.Btu.toKilowattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "2.0,6824.28","0.7,2388.4979","0.02,68.24283" })
	public void testConvertKnownKilowattHoursToBtu(double input, double expectation) {
		final double result = Energy.KilowattHours.toBtu(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilowattHoursToCaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.KilowattHours.toCalories(value);
		final double convertBack = Energy.Calories.toKilowattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.1,86042.1","0.07,60229.47","0.0123,10583.174" })
	public void testConvertKnownKilowattHoursToCalories(double input, double expectation) {
		final double result = Energy.KilowattHours.toCalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilowattHoursToUSThermsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.KilowattHours.toUSTherms(value);
		final double convertBack = Energy.USTherms.toKilowattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "5.0,0.170648","234.0,7.98632","1001.0,34.16369" })
	public void testConvertKnownKilowattHoursToUSTherms(double input, double expectation) {
		final double result = Energy.KilowattHours.toUSTherms(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilowattHoursToWattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.KilowattHours.toWattHours(value);
		final double convertBack = Energy.WattHours.toKilowattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123.0,123000.0","98.4,98400.0","1.6,1600.0" })
	public void testConvertKnownKilowattHoursToWattHours(double input, double expectation) {
		final double result = Energy.KilowattHours.toWattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilowattHoursToFootPoundsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.KilowattHours.toFootPounds(value);
		final double convertBack = Energy.FootPounds.toKilowattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.001,2655.196219","0.09,238967.6597","0.0006,1593.1177314" })
	public void testConvertKnownKilowattHoursToFootPounds(double input, double expectation) {
		final double result = Energy.KilowattHours.toFootPounds(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilowattHoursToElectronvoltsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.KilowattHours.toElectronvolts(value);
		final double convertBack = Energy.Electronvolts.toKilowattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.000008,179755440000000000000.0","0.0000000128,2.8760870400000003E+17","0.0000000001,2246943000000000.2" })
	public void testConvertKnownKilowattHoursToElectronvolts(double input, double expectation) {
		final double result = Energy.KilowattHours.toElectronvolts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSThermsToKilojoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.USTherms.toKilojoules(value);
		final double convertBack = Energy.Kilojoules.toUSTherms(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.009,949.3236","3.0,316440.12","1.9,200412.075" })
	public void testConvertKnownUSThermsToKilojoules(double input, double expectation) {
		final double result = Energy.USTherms.toKilojoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSThermsToKilocaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.USTherms.toKilocalories(value);
		final double convertBack = Energy.Kilocalories.toUSTherms(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.1,27731.44","0.04,1008.417","0.0123,310.088174" })
	public void testConvertKnownUSThermsToKilocalories(double input, double expectation) {
		final double result = Energy.USTherms.toKilocalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSThermsToJoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.USTherms.toJoules(value);
		final double convertBack = Energy.Joules.toUSTherms(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.008,843843.2","3.4e-6,358.633","0.00678,715157.112" })
	public void testConvertKnownUSThermsToJoules(double input, double expectation) {
		final double result = Energy.USTherms.toJoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSThermsToBtuAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.USTherms.toBtu(value);
		final double convertBack = Energy.Btu.toUSTherms(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.00666,665.8409891","2.0,199952.249","0.9,89978.51204" })
	public void testConvertKnownUSThermsToBtu(double input, double expectation) {
		final double result = Energy.USTherms.toBtu(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSThermsToCaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.USTherms.toCalories(value);
		final double convertBack = Energy.Calories.toUSTherms(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.003,75631.262","6.8e-3,171430.856","0.0008,20168.3365" })
	public void testConvertKnownUSThermsToCalories(double input, double expectation) {
		final double result = Energy.USTherms.toCalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSThermsToWattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.USTherms.toWattHours(value);
		final double convertBack = Energy.WattHours.toUSTherms(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.0,175800.59","1.9,55670.189","0.07,2051.008" })
	public void testConvertKnownUSThermsToWattHours(double input, double expectation) {
		final double result = Energy.USTherms.toWattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSThermsToKilowattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.USTherms.toKilowattHours(value);
		final double convertBack = Energy.KilowattHours.toUSTherms(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.9,26.3701","7.9,231.471","1.4,41.0202" })
	public void testConvertKnownUSThermsToKilowattHours(double input, double expectation) {
		final double result = Energy.USTherms.toKilowattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSThermsToFootPoundsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.USTherms.toFootPounds(value);
		final double convertBack = Energy.FootPounds.toUSTherms(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.009,700352.43389267","0.02,1556338.74198","0.0003,23345.081129" })
	public void testConvertKnownUSThermsToFootPounds(double input, double expectation) {
		final double result = Energy.USTherms.toFootPounds(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSThermsToElectronvoltsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.USTherms.toElectronvolts(value);
		final double convertBack = Energy.Electronvolts.toUSTherms(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.0000009,592520940098199000000.0","0.000000001339,8.815394875460983E+17","0.0000000000666,43846549567266728.0" })
	public void testConvertKnownUSThermsToElectronvolts(double input, double expectation) {
		final double result = Energy.USTherms.toElectronvolts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromWattHoursToKilojoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.WattHours.toKilojoules(value);
		final double convertBack = Energy.Kilojoules.toWattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.6,5.76","67.0,241.2","8.12,29.232" })
	public void testConvertKnownWattHoursToKilojoules(double input, double expectation) {
		final double result = Energy.WattHours.toKilojoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromWattHoursToKilocaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.WattHours.toKilocalories(value);
		final double convertBack = Energy.Kilocalories.toWattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "8.12,6.986616","170.0,146.272","19.2,16.52008" })
	public void testConvertKnownWattHoursToKilocalories(double input, double expectation) {
		final double result = Energy.WattHours.toKilocalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromWattHoursToJoulesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.WattHours.toJoules(value);
		final double convertBack = Energy.Joules.toWattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.7,24120.0","12.34,44424.0","0.09,324.0" })
	public void testConvertKnownWattHoursToJoules(double input, double expectation) {
		final double result = Energy.WattHours.toJoules(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromWattHoursToBtuAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.WattHours.toBtu(value);
		final double convertBack = Energy.Btu.toWattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "34.0,116.013","179.2,611.45578","0.9,3.07093" })
	public void testConvertKnownWattHoursToBtu(double input, double expectation) {
		final double result = Energy.WattHours.toBtu(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromWattHoursToCaloriesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.WattHours.toCalories(value);
		final double convertBack = Energy.Calories.toWattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.2,172.084","0.09,77.43786","12.0,10325.06754" })
	public void testConvertKnownWattHoursToCalories(double input, double expectation) {
		final double result = Energy.WattHours.toCalories(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromWattHoursToUSThermsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.WattHours.toUSTherms(value);
		final double convertBack = Energy.USTherms.toWattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1090.0,0.03720122","49990.0,1.7061369","900800.0,30.7439107" })
	public void testConvertKnownWattHoursToUSTherms(double input, double expectation) {
		final double result = Energy.WattHours.toUSTherms(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromWattHoursToKilowattHoursAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.WattHours.toKilowattHours(value);
		final double convertBack = Energy.KilowattHours.toWattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "98.0,0.098","12.5,0.0125","0.6,0.0006" })
	public void testConvertKnownWattHoursToKilowattHours(double input, double expectation) {
		final double result = Energy.WattHours.toKilowattHours(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromWattHoursToFootPoundsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.WattHours.toFootPounds(value);
		final double convertBack = Energy.FootPounds.toWattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.5,3982.829","0.3,796.567","90.1,239235.3219" })
	public void testConvertKnownWattHoursToFootPounds(double input, double expectation) {
		final double result = Energy.WattHours.toFootPounds(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromWattHoursToElectronvoltsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Energy.WattHours.toElectronvolts(value);
		final double convertBack = Energy.Electronvolts.toWattHours(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.0000000000666,1496463565615.39","0.000000008,179755383257104.03","0.0000123,2.7637390175779744E+17" })
	public void testConvertKnownWattHoursToElectronvolts(double input, double expectation) {
		final double result = Energy.WattHours.toElectronvolts(input);
		assertEquals(expectation, result, 0.01);
	}

}
