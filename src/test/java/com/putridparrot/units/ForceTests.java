// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

package com.putridparrot.units;

import net.jqwik.api.constraints.DoubleRange;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import net.jqwik.api.*;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class ForceTests {
	@Property(tries = 100)
	public void testFromDynesToNewtonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Force.Dynes.toNewtons(value);
		final double convertBack = Force.Newtons.toDynes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "900.0,0.009","1234.0,0.01234","46.0,0.00046" })
	public void testConvertKnownDynesToNewtons(double input, double expectation) {
		final double result = Force.Dynes.toNewtons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromDynesToPoundalsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Force.Dynes.toPoundals(value);
		final double convertBack = Force.Poundals.toDynes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "10099.0,0.73046207","80000.0,5.7864111","12345.0,0.89291556" })
	public void testConvertKnownDynesToPoundals(double input, double expectation) {
		final double result = Force.Dynes.toPoundals(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromDynesToKilogramforceAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Force.Dynes.toKilogramforce(value);
		final double convertBack = Force.Kilogramforce.toDynes(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123456.0,0.125890085","80000.0,0.081577297","987654321.0,1007.12712394" })
	public void testConvertKnownDynesToKilogramforce(double input, double expectation) {
		final double result = Force.Dynes.toKilogramforce(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilogramforceToNewtonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Force.Kilogramforce.toNewtons(value);
		final double convertBack = Force.Newtons.toKilogramforce(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "16.0,156.906","9.3,91.2018","5.0,49.0332" })
	public void testConvertKnownKilogramforceToNewtons(double input, double expectation) {
		final double result = Force.Kilogramforce.toNewtons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilogramforceToDynesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Force.Kilogramforce.toDynes(value);
		final double convertBack = Force.Dynes.toKilogramforce(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.1,98066.5","0.009,8825.985","2.0,1961330.0" })
	public void testConvertKnownKilogramforceToDynes(double input, double expectation) {
		final double result = Force.Kilogramforce.toDynes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilogramforceToPoundalsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Force.Kilogramforce.toPoundals(value);
		final double convertBack = Force.Poundals.toKilogramforce(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "2.0,141.863","8.4,595.826","0.9,63.8385" })
	public void testConvertKnownKilogramforceToPoundals(double input, double expectation) {
		final double result = Force.Kilogramforce.toPoundals(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromNewtonsToDynesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Force.Newtons.toDynes(value);
		final double convertBack = Force.Dynes.toNewtons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.7,70000.0","0.08,8000.0","2.3,230000.0" })
	public void testConvertKnownNewtonsToDynes(double input, double expectation) {
		final double result = Force.Newtons.toDynes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromNewtonsToPoundalsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Force.Newtons.toPoundals(value);
		final double convertBack = Force.Poundals.toNewtons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "190.0,1374.27","0.7,5.06311","89.0,643.738" })
	public void testConvertKnownNewtonsToPoundals(double input, double expectation) {
		final double result = Force.Newtons.toPoundals(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromNewtonsToKilogramforceAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Force.Newtons.toKilogramforce(value);
		final double convertBack = Force.Kilogramforce.toNewtons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "8.7,0.887153","109.0,11.1149","6.9,0.703604" })
	public void testConvertKnownNewtonsToKilogramforce(double input, double expectation) {
		final double result = Force.Newtons.toKilogramforce(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPoundalsToNewtonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Force.Poundals.toNewtons(value);
		final double convertBack = Force.Newtons.toPoundals(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "800.0,110.604","8.2,1.13369","190.0,26.2684" })
	public void testConvertKnownPoundalsToNewtons(double input, double expectation) {
		final double result = Force.Poundals.toNewtons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPoundalsToDynesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Force.Poundals.toDynes(value);
		final double convertBack = Force.Dynes.toPoundals(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.01,138.255","2.0,27651.0","0.9,12442.94589384" })
	public void testConvertKnownPoundalsToDynes(double input, double expectation) {
		final double result = Force.Poundals.toDynes(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPoundalsToKilogramforceAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Force.Poundals.toKilogramforce(value);
		final double convertBack = Force.Kilogramforce.toPoundals(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "34.0,0.479335","101.1,1.4253161","9.5,0.133932" })
	public void testConvertKnownPoundalsToKilogramforce(double input, double expectation) {
		final double result = Force.Poundals.toKilogramforce(input);
		assertEquals(expectation, result, 0.01);
	}

}
