// <auto-generated>
// This code was generated by the UnitCodeGenerator tool
//
// Changes to this file will be lost if the code is regenerated
// </auto-generated>

package com.putridparrot.units;

import net.jqwik.api.constraints.DoubleRange;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import net.jqwik.api.*;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class VolumeTests {
	@Property(tries = 100)
	public void testFromFluidOuncesToMillilitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.FluidOunces.toMillilitres(value);
		final double convertBack = Volume.Millilitres.toFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,340.957","6.01,170.7625","0.78,22.16219" })
	public void testConvertKnownFluidOuncesToMillilitres(double input, double expectation) {
		final double result = Volume.FluidOunces.toMillilitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFluidOuncesToLitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.FluidOunces.toLitres(value);
		final double convertBack = Volume.Litres.toFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "800.0,22.7305","4.5,0.127859","109.0,3.09702" })
	public void testConvertKnownFluidOuncesToLitres(double input, double expectation) {
		final double result = Volume.FluidOunces.toLitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFluidOuncesToKilolitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.FluidOunces.toKilolitres(value);
		final double convertBack = Volume.Kilolitres.toFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "56909.0,1.616959","9009.0,0.2559733","123456.0,3.50776304" })
	public void testConvertKnownFluidOuncesToKilolitres(double input, double expectation) {
		final double result = Volume.FluidOunces.toKilolitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFluidOuncesToTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.FluidOunces.toTeaspoons(value);
		final double convertBack = Volume.Teaspoons.toFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123.0,590.4","9.12,43.77598","0.2,0.96" })
	public void testConvertKnownFluidOuncesToTeaspoons(double input, double expectation) {
		final double result = Volume.FluidOunces.toTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFluidOuncesToTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.FluidOunces.toTablespoons(value);
		final double convertBack = Volume.Tablespoons.toFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "7.0,11.2","165.4,264.63989","80.1,128.1599" })
	public void testConvertKnownFluidOuncesToTablespoons(double input, double expectation) {
		final double result = Volume.FluidOunces.toTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFluidOuncesToQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.FluidOunces.toQuarts(value);
		final double convertBack = Volume.Quarts.toFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "89.0,2.225","5.9,0.1475","1300.0,32.5" })
	public void testConvertKnownFluidOuncesToQuarts(double input, double expectation) {
		final double result = Volume.FluidOunces.toQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFluidOuncesToPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.FluidOunces.toPints(value);
		final double convertBack = Volume.Pints.toFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1300.0,65.0","5.7,0.285","1900.0,95.0" })
	public void testConvertKnownFluidOuncesToPints(double input, double expectation) {
		final double result = Volume.FluidOunces.toPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFluidOuncesToGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.FluidOunces.toGallons(value);
		final double convertBack = Volume.Gallons.toFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1900.0,11.875","5.6,0.035","12345.0,77.15625" })
	public void testConvertKnownFluidOuncesToGallons(double input, double expectation) {
		final double result = Volume.FluidOunces.toGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFluidOuncesToUSTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.FluidOunces.toUSTeaspoons(value);
		final double convertBack = Volume.USTeaspoons.toFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12345.0,71163.512","8.9,51.3046","0.005,0.028822808" })
	public void testConvertKnownFluidOuncesToUSTeaspoons(double input, double expectation) {
		final double result = Volume.FluidOunces.toUSTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFluidOuncesToUSTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.FluidOunces.toUSTablespoons(value);
		final double convertBack = Volume.USTablespoons.toFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "190.0,365.089","6.8,13.0663","2340.0,4496.357" })
	public void testConvertKnownFluidOuncesToUSTablespoons(double input, double expectation) {
		final double result = Volume.FluidOunces.toUSTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFluidOuncesToUSQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.FluidOunces.toUSQuarts(value);
		final double convertBack = Volume.USQuarts.toFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "45.0,1.35107","1090.0,32.72589","777.0,23.3285" })
	public void testConvertKnownFluidOuncesToUSQuarts(double input, double expectation) {
		final double result = Volume.FluidOunces.toUSQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFluidOuncesToUSPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.FluidOunces.toUSPints(value);
		final double convertBack = Volume.USPints.toFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "678.0,40.7122","4.5,0.270214","1900.0,114.0902" })
	public void testConvertKnownFluidOuncesToUSPints(double input, double expectation) {
		final double result = Volume.FluidOunces.toUSPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFluidOuncesToUSGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.FluidOunces.toUSGallons(value);
		final double convertBack = Volume.USGallons.toFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1890.0,14.18622","5.8,0.0435344","10090.0,75.734905" })
	public void testConvertKnownFluidOuncesToUSGallons(double input, double expectation) {
		final double result = Volume.FluidOunces.toUSGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFluidOuncesToUSFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.FluidOunces.toUSFluidOunces(value);
		final double convertBack = Volume.USFluidOunces.toFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "190.0,182.544","54.8,52.64964","1.7,1.63329" })
	public void testConvertKnownFluidOuncesToUSFluidOunces(double input, double expectation) {
		final double result = Volume.FluidOunces.toUSFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromFluidOuncesToUSCupsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.FluidOunces.toUSCups(value);
		final double convertBack = Volume.USCups.toFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.0,0.72057","1800.0,216.171","6.9,0.828655" })
	public void testConvertKnownFluidOuncesToUSCups(double input, double expectation) {
		final double result = Volume.FluidOunces.toUSCups(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGallonsToMillilitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Gallons.toMillilitres(value);
		final double convertBack = Volume.Millilitres.toGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.3,5909.92","0.45,2045.741","1.8,8182.96" })
	public void testConvertKnownGallonsToMillilitres(double input, double expectation) {
		final double result = Volume.Gallons.toMillilitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGallonsToLitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Gallons.toLitres(value);
		final double convertBack = Volume.Litres.toGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123.0,559.169","9.3,42.2786","0.67,3.04588" })
	public void testConvertKnownGallonsToLitres(double input, double expectation) {
		final double result = Volume.Gallons.toLitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGallonsToKilolitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Gallons.toKilolitres(value);
		final double convertBack = Volume.Kilolitres.toGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1009.0,4.587005","9.6,0.0436425","123456.0,561.242087" })
	public void testConvertKnownGallonsToKilolitres(double input, double expectation) {
		final double result = Volume.Gallons.toKilolitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGallonsToTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Gallons.toTeaspoons(value);
		final double convertBack = Volume.Teaspoons.toGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.0,4608.0","78.12,59996.16","0.34,261.1199" })
	public void testConvertKnownGallonsToTeaspoons(double input, double expectation) {
		final double result = Volume.Gallons.toTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGallonsToTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Gallons.toTablespoons(value);
		final double convertBack = Volume.Tablespoons.toGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.9,230.4","1.6,409.6","0.33,84.47997" })
	public void testConvertKnownGallonsToTablespoons(double input, double expectation) {
		final double result = Volume.Gallons.toTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGallonsToQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Gallons.toQuarts(value);
		final double convertBack = Volume.Quarts.toGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "109.0,436.0","5.8,23.2","0.23,0.92" })
	public void testConvertKnownGallonsToQuarts(double input, double expectation) {
		final double result = Volume.Gallons.toQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGallonsToPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Gallons.toPints(value);
		final double convertBack = Volume.Pints.toGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.23,1.84","190.0,1520.0","24.7,197.6" })
	public void testConvertKnownGallonsToPints(double input, double expectation) {
		final double result = Volume.Gallons.toPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGallonsToFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Gallons.toFluidOunces(value);
		final double convertBack = Volume.FluidOunces.toGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "24.7,3952.0","13.09,2094.4","5.8,928.0" })
	public void testConvertKnownGallonsToFluidOunces(double input, double expectation) {
		final double result = Volume.Gallons.toFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGallonsToUSTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Gallons.toUSTeaspoons(value);
		final double convertBack = Volume.USTeaspoons.toGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "5.8,5349.51","0.44,405.8251","1.9,1752.43" })
	public void testConvertKnownGallonsToUSTeaspoons(double input, double expectation) {
		final double result = Volume.Gallons.toUSTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGallonsToUSTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Gallons.toUSTablespoons(value);
		final double convertBack = Volume.USTablespoons.toGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.8,553.398","0.33,101.4562","100.0,30744.33080" })
	public void testConvertKnownGallonsToUSTablespoons(double input, double expectation) {
		final double result = Volume.Gallons.toUSTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGallonsToUSQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Gallons.toUSQuarts(value);
		final double convertBack = Volume.USQuarts.toGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "78.0,374.696","1.7,8.16646","16.9,81.18421" })
	public void testConvertKnownGallonsToUSQuarts(double input, double expectation) {
		final double result = Volume.Gallons.toUSQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGallonsToUSPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Gallons.toUSPints(value);
		final double convertBack = Volume.USPints.toGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "13.4,128.7418","8.12,78.01371","0.99,9.511523" })
	public void testConvertKnownGallonsToUSPints(double input, double expectation) {
		final double result = Volume.Gallons.toUSPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGallonsToUSGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Gallons.toUSGallons(value);
		final double convertBack = Volume.USGallons.toGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.5,1.80142","0.78,0.9367409","103.0,123.698" })
	public void testConvertKnownGallonsToUSGallons(double input, double expectation) {
		final double result = Volume.Gallons.toUSGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGallonsToUSFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Gallons.toUSFluidOunces(value);
		final double convertBack = Volume.USFluidOunces.toGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "111.0,17063.1","89.9,13819.57","1.2,184.466" })
	public void testConvertKnownGallonsToUSFluidOunces(double input, double expectation) {
		final double result = Volume.Gallons.toUSFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromGallonsToUSCupsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Gallons.toUSCups(value);
		final double convertBack = Volume.USCups.toGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.2,23.0582","0.55,10.56836","890.0,17101.534007630" })
	public void testConvertKnownGallonsToUSCups(double input, double expectation) {
		final double result = Volume.Gallons.toUSCups(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilolitresToMillilitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Kilolitres.toMillilitres(value);
		final double convertBack = Volume.Millilitres.toKilolitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.09,90000.0","0.00123,1230.0","1.2,1.2e+6" })
	public void testConvertKnownKilolitresToMillilitres(double input, double expectation) {
		final double result = Volume.Kilolitres.toMillilitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilolitresToLitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Kilolitres.toLitres(value);
		final double convertBack = Volume.Litres.toKilolitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.2,1200.0","0.8,800.0","456.0,456000.0" })
	public void testConvertKnownKilolitresToLitres(double input, double expectation) {
		final double result = Volume.Kilolitres.toLitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilolitresToTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Kilolitres.toTeaspoons(value);
		final double convertBack = Volume.Teaspoons.toKilolitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.7,118255.41900799","0.01,1689.363","4.5,760213.407908" })
	public void testConvertKnownKilolitresToTeaspoons(double input, double expectation) {
		final double result = Volume.Kilolitres.toTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilolitresToTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Kilolitres.toTablespoons(value);
		final double convertBack = Volume.Tablespoons.toKilolitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.3,16893.631286856","2.9,163305.10243961","0.067,3772.911" })
	public void testConvertKnownKilolitresToTablespoons(double input, double expectation) {
		final double result = Volume.Kilolitres.toTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilolitresToQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Kilolitres.toQuarts(value);
		final double convertBack = Volume.Quarts.toKilolitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.09,79.18893","2.3,2023.72","0.67,589.5176" })
	public void testConvertKnownKilolitresToQuarts(double input, double expectation) {
		final double result = Volume.Kilolitres.toQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilolitresToPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Kilolitres.toPints(value);
		final double convertBack = Volume.Pints.toKilolitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.4,703.902","67.0,117903.46835618","9.3,16365.7" })
	public void testConvertKnownKilolitresToPints(double input, double expectation) {
		final double result = Volume.Kilolitres.toPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilolitresToGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Kilolitres.toGallons(value);
		final double convertBack = Volume.Gallons.toKilolitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "109.0,23976.638149","7.2,1583.78","0.4,87.9877" })
	public void testConvertKnownKilolitresToGallons(double input, double expectation) {
		final double result = Volume.Kilolitres.toGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilolitresToFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Kilolitres.toFluidOunces(value);
		final double convertBack = Volume.FluidOunces.toKilolitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.2,7039.02","4.8,168936.31286856","6.0,211170.391085" })
	public void testConvertKnownKilolitresToFluidOunces(double input, double expectation) {
		final double result = Volume.Kilolitres.toFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilolitresToUSTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Kilolitres.toUSTeaspoons(value);
		final double convertBack = Volume.USTeaspoons.toKilolitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.0,811536.5448442","0.2,40576.82724221160","2.4,486921.92690653" })
	public void testConvertKnownKilolitresToUSTeaspoons(double input, double expectation) {
		final double result = Volume.Kilolitres.toUSTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilolitresToUSTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Kilolitres.toUSTablespoons(value);
		final double convertBack = Volume.USTablespoons.toKilolitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.3,87916.45902479","0.6,40576.82724221","0.03,2028.841" })
	public void testConvertKnownKilolitresToUSTablespoons(double input, double expectation) {
		final double result = Volume.Kilolitres.toUSTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilolitresToUSQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Kilolitres.toUSQuarts(value);
		final double convertBack = Volume.USQuarts.toKilolitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.09,95.10194","2.5,2641.72","178.9,189041.52" })
	public void testConvertKnownKilolitresToUSQuarts(double input, double expectation) {
		final double result = Volume.Kilolitres.toUSQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilolitresToUSPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Kilolitres.toUSPints(value);
		final double convertBack = Volume.USPints.toKilolitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "67.0,141596.2200639","4.7,9932.87","108.9,230146.69" })
	public void testConvertKnownKilolitresToUSPints(double input, double expectation) {
		final double result = Volume.Kilolitres.toUSPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilolitresToUSGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Kilolitres.toUSGallons(value);
		final double convertBack = Volume.USGallons.toKilolitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.6,422.675","57.0,15057.8","0.88,232.4714" })
	public void testConvertKnownKilolitresToUSGallons(double input, double expectation) {
		final double result = Volume.Kilolitres.toUSGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilolitresToUSFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Kilolitres.toUSFluidOunces(value);
		final double convertBack = Volume.USFluidOunces.toKilolitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.07,2366.982","4.2,142018.89516765","12.0,405768.27190759" })
	public void testConvertKnownKilolitresToUSFluidOunces(double input, double expectation) {
		final double result = Volume.Kilolitres.toUSFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromKilolitresToUSCupsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Kilolitres.toUSCups(value);
		final double convertBack = Volume.USCups.toKilolitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,50721.03405276","0.8,3381.4","6.2,26205.86759392" })
	public void testConvertKnownKilolitresToUSCups(double input, double expectation) {
		final double result = Volume.Kilolitres.toUSCups(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromLitresToMillilitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Litres.toMillilitres(value);
		final double convertBack = Volume.Millilitres.toLitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "34.0,34000.0","0.67,670.0","1.09,1090.0" })
	public void testConvertKnownLitresToMillilitres(double input, double expectation) {
		final double result = Volume.Litres.toMillilitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromLitresToKilolitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Litres.toKilolitres(value);
		final double convertBack = Volume.Kilolitres.toLitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "200.0,0.2","12345.0,12.345","80.0,0.08" })
	public void testConvertKnownLitresToKilolitres(double input, double expectation) {
		final double result = Volume.Litres.toKilolitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromLitresToTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Litres.toTeaspoons(value);
		final double convertBack = Volume.Teaspoons.toLitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "3.0,506.809","0.2,33.7873","4.2,709.533" })
	public void testConvertKnownLitresToTeaspoons(double input, double expectation) {
		final double result = Volume.Litres.toTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromLitresToTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Litres.toTablespoons(value);
		final double convertBack = Volume.Tablespoons.toLitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "3.0,168.936","0.4,22.5248","67.0,3772.91" })
	public void testConvertKnownLitresToTablespoons(double input, double expectation) {
		final double result = Volume.Litres.toTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromLitresToQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Litres.toQuarts(value);
		final double convertBack = Volume.Quarts.toLitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "54.0,47.5134","2.0,1.75975","0.7,0.615914" })
	public void testConvertKnownLitresToQuarts(double input, double expectation) {
		final double result = Volume.Litres.toQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromLitresToPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Litres.toPints(value);
		final double convertBack = Volume.Pints.toLitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.5,0.879877","145.0,255.164","9.1,16.0138" })
	public void testConvertKnownLitresToPints(double input, double expectation) {
		final double result = Volume.Litres.toPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromLitresToGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Litres.toGallons(value);
		final double convertBack = Volume.Gallons.toLitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.9,2.837603","109.0,23.9766","67.0,14.7379" })
	public void testConvertKnownLitresToGallons(double input, double expectation) {
		final double result = Volume.Litres.toGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromLitresToFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Litres.toFluidOunces(value);
		final double convertBack = Volume.FluidOunces.toLitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "5.0,175.975","0.3,10.5585","1.1,38.7146" })
	public void testConvertKnownLitresToFluidOunces(double input, double expectation) {
		final double result = Volume.Litres.toFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromLitresToUSTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Litres.toUSTeaspoons(value);
		final double convertBack = Volume.USTeaspoons.toLitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,2434.61","0.7,142.019","89.9,18239.29" })
	public void testConvertKnownLitresToUSTeaspoons(double input, double expectation) {
		final double result = Volume.Litres.toUSTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromLitresToUSTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Litres.toUSTablespoons(value);
		final double convertBack = Volume.USTablespoons.toLitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,811.537","5.6,378.717","0.5,33.814" })
	public void testConvertKnownLitresToUSTablespoons(double input, double expectation) {
		final double result = Volume.Litres.toUSTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromLitresToUSQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Litres.toUSQuarts(value);
		final double convertBack = Volume.USQuarts.toLitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,12.6803","1.09,1.15179","5.5,5.81179" })
	public void testConvertKnownLitresToUSQuarts(double input, double expectation) {
		final double result = Volume.Litres.toUSQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromLitresToUSPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Litres.toUSPints(value);
		final double convertBack = Volume.USPints.toLitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "3.4,7.18548","0.8,1.6907","3000.0,6340.129" })
	public void testConvertKnownLitresToUSPints(double input, double expectation) {
		final double result = Volume.Litres.toUSPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromLitresToUSGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Litres.toUSGallons(value);
		final double convertBack = Volume.USGallons.toLitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "109.1,28.821171","41.5,10.96314","0.8,0.211338" })
	public void testConvertKnownLitresToUSGallons(double input, double expectation) {
		final double result = Volume.Litres.toUSGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromLitresToUSFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Litres.toUSFluidOunces(value);
		final double convertBack = Volume.USFluidOunces.toLitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "81.0,2738.94","7.3,246.842","0.65,21.97911" })
	public void testConvertKnownLitresToUSFluidOunces(double input, double expectation) {
		final double result = Volume.Litres.toUSFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromLitresToUSCupsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Litres.toUSCups(value);
		final double convertBack = Volume.USCups.toLitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.9,3.80408","103.9,439.15962","71.6,302.6355" })
	public void testConvertKnownLitresToUSCups(double input, double expectation) {
		final double result = Volume.Litres.toUSCups(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMillilitresToLitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Millilitres.toLitres(value);
		final double convertBack = Volume.Litres.toMillilitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1900.0,1.9","56789.0,56.789","567.0,0.567" })
	public void testConvertKnownMillilitresToLitres(double input, double expectation) {
		final double result = Volume.Millilitres.toLitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMillilitresToKilolitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Millilitres.toKilolitres(value);
		final double convertBack = Volume.Kilolitres.toMillilitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "10060000.0,10.06","987654.0,0.987654","405000.0,0.405" })
	public void testConvertKnownMillilitresToKilolitres(double input, double expectation) {
		final double result = Volume.Millilitres.toKilolitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMillilitresToTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Millilitres.toTeaspoons(value);
		final double convertBack = Volume.Teaspoons.toMillilitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.0,0.168936","56.0,9.46043","12.3,2.077917" })
	public void testConvertKnownMillilitresToTeaspoons(double input, double expectation) {
		final double result = Volume.Millilitres.toTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMillilitresToTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Millilitres.toTablespoons(value);
		final double convertBack = Volume.Tablespoons.toMillilitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "109.0,6.13802","88.0,4.95547","12.0,0.675745" })
	public void testConvertKnownMillilitresToTablespoons(double input, double expectation) {
		final double result = Volume.Millilitres.toTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMillilitresToQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Millilitres.toQuarts(value);
		final double convertBack = Volume.Quarts.toMillilitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "890.0,0.783091","12345.0,10.862081","129.0,0.113504" })
	public void testConvertKnownMillilitresToQuarts(double input, double expectation) {
		final double result = Volume.Millilitres.toQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMillilitresToPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Millilitres.toPints(value);
		final double convertBack = Volume.Pints.toMillilitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "124.0,0.218209","99.0,0.174216","607.3,1.0686986" })
	public void testConvertKnownMillilitresToPints(double input, double expectation) {
		final double result = Volume.Millilitres.toPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMillilitresToGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Millilitres.toGallons(value);
		final double convertBack = Volume.Gallons.toMillilitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1234.0,0.2714421","9000.0,1.979723","10209.98,2.2458816257" })
	public void testConvertKnownMillilitresToGallons(double input, double expectation) {
		final double result = Volume.Millilitres.toGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMillilitresToFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Millilitres.toFluidOunces(value);
		final double convertBack = Volume.FluidOunces.toMillilitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "78.0,2.74522","12.9,0.4540165","1009.0,35.51184" })
	public void testConvertKnownMillilitresToFluidOunces(double input, double expectation) {
		final double result = Volume.Millilitres.toFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMillilitresToUSTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Millilitres.toUSTeaspoons(value);
		final double convertBack = Volume.USTeaspoons.toMillilitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100.0,20.2884","12.3,2.495476","69.0,13.999" })
	public void testConvertKnownMillilitresToUSTeaspoons(double input, double expectation) {
		final double result = Volume.Millilitres.toUSTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMillilitresToUSTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Millilitres.toUSTablespoons(value);
		final double convertBack = Volume.USTablespoons.toMillilitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "38.0,2.56987","1023.0,69.18349","88.8,6.00537" })
	public void testConvertKnownMillilitresToUSTablespoons(double input, double expectation) {
		final double result = Volume.Millilitres.toUSTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMillilitresToUSQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Millilitres.toUSQuarts(value);
		final double convertBack = Volume.USQuarts.toMillilitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1009.0,1.066198","4567.0,4.825895","8009.0,8.463016" })
	public void testConvertKnownMillilitresToUSQuarts(double input, double expectation) {
		final double result = Volume.Millilitres.toUSQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMillilitresToUSPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Millilitres.toUSPints(value);
		final double convertBack = Volume.USPints.toMillilitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "110.0,0.232471","2032.0,4.294381","1000.9,2.11527846" })
	public void testConvertKnownMillilitresToUSPints(double input, double expectation) {
		final double result = Volume.Millilitres.toUSPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMillilitresToUSGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Millilitres.toUSGallons(value);
		final double convertBack = Volume.USGallons.toMillilitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "5000.0,1.32086","123456.0,32.6136249","900.0,0.237755" })
	public void testConvertKnownMillilitresToUSGallons(double input, double expectation) {
		final double result = Volume.Millilitres.toUSGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMillilitresToUSFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Millilitres.toUSFluidOunces(value);
		final double convertBack = Volume.USFluidOunces.toMillilitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "67.0,2.26554","12.6,0.4260567","11009.0,372.25858" })
	public void testConvertKnownMillilitresToUSFluidOunces(double input, double expectation) {
		final double result = Volume.Millilitres.toUSFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromMillilitresToUSCupsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Millilitres.toUSCups(value);
		final double convertBack = Volume.USCups.toMillilitres(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "348.0,1.47091","12.9,0.05452511","700.0,2.95873" })
	public void testConvertKnownMillilitresToUSCups(double input, double expectation) {
		final double result = Volume.Millilitres.toUSCups(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPintsToMillilitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Pints.toMillilitres(value);
		final double convertBack = Volume.Millilitres.toPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.7,397.783","5.6,3182.26","6.0,3409.57" })
	public void testConvertKnownPintsToMillilitres(double input, double expectation) {
		final double result = Volume.Pints.toMillilitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPintsToLitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Pints.toLitres(value);
		final double convertBack = Volume.Litres.toPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.0,3.40957","0.123,0.069896134","45.9,26.08319" })
	public void testConvertKnownPintsToLitres(double input, double expectation) {
		final double result = Volume.Pints.toLitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPintsToKilolitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Pints.toKilolitres(value);
		final double convertBack = Volume.Kilolitres.toPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "456.0,0.259127","10450.0,5.9383301","9000.9,5.11486269" })
	public void testConvertKnownPintsToKilolitres(double input, double expectation) {
		final double result = Volume.Pints.toKilolitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPintsToTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Pints.toTeaspoons(value);
		final double convertBack = Volume.Teaspoons.toPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "5.0,480.0","0.3,28.8","190.0,18240.0" })
	public void testConvertKnownPintsToTeaspoons(double input, double expectation) {
		final double result = Volume.Pints.toTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPintsToTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Pints.toTablespoons(value);
		final double convertBack = Volume.Tablespoons.toPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "187.0,5984.0","54.5,1743.999","0.33,10.56" })
	public void testConvertKnownPintsToTablespoons(double input, double expectation) {
		final double result = Volume.Pints.toTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPintsToQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Pints.toQuarts(value);
		final double convertBack = Volume.Quarts.toPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "5.6,2.8","109.0,54.5","0.3,0.15" })
	public void testConvertKnownPintsToQuarts(double input, double expectation) {
		final double result = Volume.Pints.toQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPintsToGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Pints.toGallons(value);
		final double convertBack = Volume.Gallons.toPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.3,0.0375","800.0,100.0","1.5,0.1875" })
	public void testConvertKnownPintsToGallons(double input, double expectation) {
		final double result = Volume.Pints.toGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPintsToFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Pints.toFluidOunces(value);
		final double convertBack = Volume.FluidOunces.toPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.5,30.0","789.0,15780.0","1020.8,20416.0" })
	public void testConvertKnownPintsToFluidOunces(double input, double expectation) {
		final double result = Volume.Pints.toFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPintsToUSTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Pints.toUSTeaspoons(value);
		final double convertBack = Volume.USTeaspoons.toPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1020.8,117689.298303295","0.4,46.1165","104.0,11990.2890120912" })
	public void testConvertKnownPintsToUSTeaspoons(double input, double expectation) {
		final double result = Volume.Pints.toUSTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPintsToUSTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Pints.toUSTablespoons(value);
		final double convertBack = Volume.USTablespoons.toPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "104.0,3996.76","5.6,215.21","0.4,15.3722" })
	public void testConvertKnownPintsToUSTablespoons(double input, double expectation) {
		final double result = Volume.Pints.toUSTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPintsToUSQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Pints.toUSQuarts(value);
		final double convertBack = Volume.USQuarts.toPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.55,0.3302612","80.6,48.39828","12.0,7.2057" })
	public void testConvertKnownPintsToUSQuarts(double input, double expectation) {
		final double result = Volume.Pints.toUSQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPintsToUSPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Pints.toUSPints(value);
		final double convertBack = Volume.USPints.toPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,14.4114","4.7,5.64446","0.44,0.528418" })
	public void testConvertKnownPintsToUSPints(double input, double expectation) {
		final double result = Volume.Pints.toUSPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPintsToUSGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Pints.toUSGallons(value);
		final double convertBack = Volume.USGallons.toPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.2,0.180142","9000.0,1351.069","108.4,16.272871" })
	public void testConvertKnownPintsToUSGallons(double input, double expectation) {
		final double result = Volume.Pints.toUSGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPintsToUSFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Pints.toUSFluidOunces(value);
		final double convertBack = Volume.USFluidOunces.toPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "108.0,2075.24","23.4,449.6357","8.65,166.2115" })
	public void testConvertKnownPintsToUSFluidOunces(double input, double expectation) {
		final double result = Volume.Pints.toUSFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromPintsToUSCupsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Pints.toUSCups(value);
		final double convertBack = Volume.USCups.toPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "23.0,55.2437","3.0,7.2057","50.6,121.5361" })
	public void testConvertKnownPintsToUSCups(double input, double expectation) {
		final double result = Volume.Pints.toUSCups(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromQuartsToMillilitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Quarts.toMillilitres(value);
		final double convertBack = Volume.Millilitres.toQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.4,1591.13","800.0,909218.37579999","0.7,795.566" })
	public void testConvertKnownQuartsToMillilitres(double input, double expectation) {
		final double result = Volume.Quarts.toMillilitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromQuartsToLitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Quarts.toLitres(value);
		final double convertBack = Volume.Litres.toQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "675.0,767.153","45.8,52.05273","0.8,0.909218" })
	public void testConvertKnownQuartsToLitres(double input, double expectation) {
		final double result = Volume.Quarts.toLitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromQuartsToKilolitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Quarts.toKilolitres(value);
		final double convertBack = Volume.Kilolitres.toQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "8009.0,9.102409","12345.0,14.03037","601.0,0.68305" })
	public void testConvertKnownQuartsToKilolitres(double input, double expectation) {
		final double result = Volume.Quarts.toKilolitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromQuartsToTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Quarts.toTeaspoons(value);
		final double convertBack = Volume.Teaspoons.toQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.0,1152.0","0.9,172.8","0.03,5.759998" })
	public void testConvertKnownQuartsToTeaspoons(double input, double expectation) {
		final double result = Volume.Quarts.toTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromQuartsToTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Quarts.toTablespoons(value);
		final double convertBack = Volume.Tablespoons.toQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "5.9,377.6","0.34,21.75999","2.9,185.6" })
	public void testConvertKnownQuartsToTablespoons(double input, double expectation) {
		final double result = Volume.Quarts.toTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromQuartsToPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Quarts.toPints(value);
		final double convertBack = Volume.Pints.toQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.5,9.0","102.8,205.6","0.46,0.92" })
	public void testConvertKnownQuartsToPints(double input, double expectation) {
		final double result = Volume.Quarts.toPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromQuartsToGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Quarts.toGallons(value);
		final double convertBack = Volume.Gallons.toQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.46,0.115","190.0,47.5","67.6,16.9" })
	public void testConvertKnownQuartsToGallons(double input, double expectation) {
		final double result = Volume.Quarts.toGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromQuartsToFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Quarts.toFluidOunces(value);
		final double convertBack = Volume.FluidOunces.toQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "67.6,2704.0","1009.0,40360.0","6.2,248.0" })
	public void testConvertKnownQuartsToFluidOunces(double input, double expectation) {
		final double result = Volume.Quarts.toFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromQuartsToUSTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Quarts.toUSTeaspoons(value);
		final double convertBack = Volume.USTeaspoons.toQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.2,1429.61","0.7,161.408","80.3,18515.77" })
	public void testConvertKnownQuartsToUSTeaspoons(double input, double expectation) {
		final double result = Volume.Quarts.toUSTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromQuartsToUSTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Quarts.toUSTablespoons(value);
		final double convertBack = Volume.USTablespoons.toQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "80.0,6148.86","5.7,438.107","0.44,33.81875" })
	public void testConvertKnownQuartsToUSTablespoons(double input, double expectation) {
		final double result = Volume.Quarts.toUSTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromQuartsToUSQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Quarts.toUSQuarts(value);
		final double convertBack = Volume.USQuarts.toQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.44,0.528418","12.7,15.25206","109.0,130.904" })
	public void testConvertKnownQuartsToUSQuarts(double input, double expectation) {
		final double result = Volume.Quarts.toUSQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromQuartsToUSPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Quarts.toUSPints(value);
		final double convertBack = Volume.USPints.toQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "18.0,43.2342","2.5,6.00475","0.4,0.96076" })
	public void testConvertKnownQuartsToUSPints(double input, double expectation) {
		final double result = Volume.Quarts.toUSPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromQuartsToUSGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Quarts.toUSGallons(value);
		final double convertBack = Volume.USGallons.toQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.8,1.44114","0.3,0.0900712","1.5,0.450356" })
	public void testConvertKnownQuartsToUSGallons(double input, double expectation) {
		final double result = Volume.Quarts.toUSGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromQuartsToUSFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Quarts.toUSFluidOunces(value);
		final double convertBack = Volume.USFluidOunces.toQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.0,230.582","0.46,17.67798","2.0,76.8608" })
	public void testConvertKnownQuartsToUSFluidOunces(double input, double expectation) {
		final double result = Volume.Quarts.toUSFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromQuartsToUSCupsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Quarts.toUSCups(value);
		final double convertBack = Volume.USCups.toQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "2.0,9.6076","800.9,3847.3632","0.23,1.104874" })
	public void testConvertKnownQuartsToUSCups(double input, double expectation) {
		final double result = Volume.Quarts.toUSCups(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTablespoonsToMillilitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Tablespoons.toMillilitres(value);
		final double convertBack = Volume.Millilitres.toTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "2.7,47.9471","0.65,11.54281","80.1,1422.43" })
	public void testConvertKnownTablespoonsToMillilitres(double input, double expectation) {
		final double result = Volume.Tablespoons.toMillilitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTablespoonsToLitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Tablespoons.toLitres(value);
		final double convertBack = Volume.Litres.toTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "55.0,0.976699","190.0,3.37405","4000.0,71.0397889" })
	public void testConvertKnownTablespoonsToLitres(double input, double expectation) {
		final double result = Volume.Tablespoons.toLitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTablespoonsToKilolitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Tablespoons.toKilolitres(value);
		final double convertBack = Volume.Kilolitres.toTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "10000.0,0.1775817","98765.0,1.7538858","666999.0,11.8446826" })
	public void testConvertKnownTablespoonsToKilolitres(double input, double expectation) {
		final double result = Volume.Tablespoons.toKilolitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTablespoonsToTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Tablespoons.toTeaspoons(value);
		final double convertBack = Volume.Teaspoons.toTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,36.0","0.24,0.72","19.9,59.7" })
	public void testConvertKnownTablespoonsToTeaspoons(double input, double expectation) {
		final double result = Volume.Tablespoons.toTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTablespoonsToQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Tablespoons.toQuarts(value);
		final double convertBack = Volume.Quarts.toTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "190.0,2.96875","9.0,0.140625","3.7,0.0578125" })
	public void testConvertKnownTablespoonsToQuarts(double input, double expectation) {
		final double result = Volume.Tablespoons.toQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTablespoonsToPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Tablespoons.toPints(value);
		final double convertBack = Volume.Pints.toTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.7,0.146875","190.0,5.9375","1090.9,34.0906391" })
	public void testConvertKnownTablespoonsToPints(double input, double expectation) {
		final double result = Volume.Tablespoons.toPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTablespoonsToGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Tablespoons.toGallons(value);
		final double convertBack = Volume.Gallons.toTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "8000.0,31.25001","54.0,0.210938","99.3,0.3878908" })
	public void testConvertKnownTablespoonsToGallons(double input, double expectation) {
		final double result = Volume.Tablespoons.toGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTablespoonsToFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Tablespoons.toFluidOunces(value);
		final double convertBack = Volume.FluidOunces.toTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "80.8,50.50002","9009.0,5630.627","12.6,7.875003" })
	public void testConvertKnownTablespoonsToFluidOunces(double input, double expectation) {
		final double result = Volume.Tablespoons.toFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTablespoonsToUSTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Tablespoons.toUSTeaspoons(value);
		final double convertBack = Volume.USTeaspoons.toTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,43.2342","0.6,2.16171","52.9,190.5909" })
	public void testConvertKnownTablespoonsToUSTeaspoons(double input, double expectation) {
		final double result = Volume.Tablespoons.toUSTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTablespoonsToUSTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Tablespoons.toUSTablespoons(value);
		final double convertBack = Volume.USTablespoons.toTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "67.0,80.4637","5.8,6.96551","0.23,0.2762186" })
	public void testConvertKnownTablespoonsToUSTablespoons(double input, double expectation) {
		final double result = Volume.Tablespoons.toUSTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTablespoonsToUSQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Tablespoons.toUSQuarts(value);
		final double convertBack = Volume.USQuarts.toTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "54.0,1.0133","1005.9,18.875563","0.9,0.0168884" })
	public void testConvertKnownTablespoonsToUSQuarts(double input, double expectation) {
		final double result = Volume.Tablespoons.toUSQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTablespoonsToUSPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Tablespoons.toUSPints(value);
		final double convertBack = Volume.USPints.toTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "34.0,1.27601","109.3,4.1019963","190.0,7.13064" })
	public void testConvertKnownTablespoonsToUSPints(double input, double expectation) {
		final double result = Volume.Tablespoons.toUSPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTablespoonsToUSGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Tablespoons.toUSGallons(value);
		final double convertBack = Volume.USGallons.toTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "900.0,4.22209","2.8,0.0131354","1469.0,6.891391" })
	public void testConvertKnownTablespoonsToUSGallons(double input, double expectation) {
		final double result = Volume.Tablespoons.toUSGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTablespoonsToUSFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Tablespoons.toUSFluidOunces(value);
		final double convertBack = Volume.USFluidOunces.toTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1009.0,605.8795","8.2,4.9239","190.5,114.39053" })
	public void testConvertKnownTablespoonsToUSFluidOunces(double input, double expectation) {
		final double result = Volume.Tablespoons.toUSFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTablespoonsToUSCupsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Tablespoons.toUSCups(value);
		final double convertBack = Volume.USCups.toTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "109.0,8.18147","3.4,0.255202","1000.0,75.0594" })
	public void testConvertKnownTablespoonsToUSCups(double input, double expectation) {
		final double result = Volume.Tablespoons.toUSCups(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTeaspoonsToMillilitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Teaspoons.toMillilitres(value);
		final double convertBack = Volume.Millilitres.toTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.6,3.55163","1.3,7.69521","0.07,0.4143573" })
	public void testConvertKnownTeaspoonsToMillilitres(double input, double expectation) {
		final double result = Volume.Teaspoons.toMillilitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTeaspoonsToLitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Teaspoons.toLitres(value);
		final double convertBack = Volume.Litres.toTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "32.0,0.18942","180.0,1.06549","4567.0,27.03386" })
	public void testConvertKnownTeaspoonsToLitres(double input, double expectation) {
		final double result = Volume.Teaspoons.toLitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTeaspoonsToKilolitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Teaspoons.toKilolitres(value);
		final double convertBack = Volume.Kilolitres.toTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "236511.0,1.4","33787.3,0.2","1689.363,0.01" })
	public void testConvertKnownTeaspoonsToKilolitres(double input, double expectation) {
		final double result = Volume.Teaspoons.toKilolitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTeaspoonsToTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Teaspoons.toTablespoons(value);
		final double convertBack = Volume.Tablespoons.toTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,4.0","900.8,300.26667","1.23,0.41" })
	public void testConvertKnownTeaspoonsToTablespoons(double input, double expectation) {
		final double result = Volume.Teaspoons.toTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTeaspoonsToQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Teaspoons.toQuarts(value);
		final double convertBack = Volume.Quarts.toTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "109.0,0.567709","4500.0,23.43751","89.0,0.463542" })
	public void testConvertKnownTeaspoonsToQuarts(double input, double expectation) {
		final double result = Volume.Teaspoons.toQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTeaspoonsToPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Teaspoons.toPints(value);
		final double convertBack = Volume.Pints.toTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "678.0,7.0625","109.0,1.13542","12.5,0.1302084" })
	public void testConvertKnownTeaspoonsToPints(double input, double expectation) {
		final double result = Volume.Teaspoons.toPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTeaspoonsToGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Teaspoons.toGallons(value);
		final double convertBack = Volume.Gallons.toTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "190.0,0.247396","8090.0,10.53386","238.9,0.31106784" })
	public void testConvertKnownTeaspoonsToGallons(double input, double expectation) {
		final double result = Volume.Teaspoons.toGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTeaspoonsToFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Teaspoons.toFluidOunces(value);
		final double convertBack = Volume.FluidOunces.toTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "109.0,22.7083","55.7,11.60417","609.0,126.875" })
	public void testConvertKnownTeaspoonsToFluidOunces(double input, double expectation) {
		final double result = Volume.Teaspoons.toFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTeaspoonsToUSTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Teaspoons.toUSTeaspoons(value);
		final double convertBack = Volume.USTeaspoons.toTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "90.0,108.086","1.45,1.741379","80.1,96.19616" })
	public void testConvertKnownTeaspoonsToUSTeaspoons(double input, double expectation) {
		final double result = Volume.Teaspoons.toUSTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTeaspoonsToUSTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Teaspoons.toUSTablespoons(value);
		final double convertBack = Volume.USTablespoons.toTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "56.0,22.4177","7.0,2.80222","109.0,43.6345" })
	public void testConvertKnownTeaspoonsToUSTablespoons(double input, double expectation) {
		final double result = Volume.Teaspoons.toUSTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTeaspoonsToUSQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Teaspoons.toUSQuarts(value);
		final double convertBack = Volume.USQuarts.toTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "199.0,1.24474","5.9,0.0369042","23.0,0.143864" })
	public void testConvertKnownTeaspoonsToUSQuarts(double input, double expectation) {
		final double result = Volume.Teaspoons.toUSQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTeaspoonsToUSPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Teaspoons.toUSPints(value);
		final double convertBack = Volume.USPints.toTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "106.0,1.32605","34.0,0.425337","6.21,0.07656059" })
	public void testConvertKnownTeaspoonsToUSPints(double input, double expectation) {
		final double result = Volume.Teaspoons.toUSPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTeaspoonsToUSGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Teaspoons.toUSGallons(value);
		final double convertBack = Volume.USGallons.toTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "900.0,1.40736","1234.6,1.93059035","88.0,0.137609" })
	public void testConvertKnownTeaspoonsToUSGallons(double input, double expectation) {
		final double result = Volume.Teaspoons.toUSGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTeaspoonsToUSFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Teaspoons.toUSFluidOunces(value);
		final double convertBack = Volume.USFluidOunces.toTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "56.0,11.2089","2.9,0.580459","1020.0,204.1616" })
	public void testConvertKnownTeaspoonsToUSFluidOunces(double input, double expectation) {
		final double result = Volume.Teaspoons.toUSFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromTeaspoonsToUSCupsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.Teaspoons.toUSCups(value);
		final double convertBack = Volume.USCups.toTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "8000.0,200.1584","34.0,0.850673","109.9,2.7496761" })
	public void testConvertKnownTeaspoonsToUSCups(double input, double expectation) {
		final double result = Volume.Teaspoons.toUSCups(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSCupsToMillilitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USCups.toMillilitres(value);
		final double convertBack = Volume.Millilitres.toUSCups(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "11.0,2602.47","109.0,25788.1177","4.5,1064.65" })
	public void testConvertKnownUSCupsToMillilitres(double input, double expectation) {
		final double result = Volume.USCups.toMillilitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSCupsToLitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USCups.toLitres(value);
		final double convertBack = Volume.Litres.toUSCups(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "56.0,13.2489","4.1,0.970012","399.0,94.3987" })
	public void testConvertKnownUSCupsToLitres(double input, double expectation) {
		final double result = Volume.USCups.toLitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSCupsToKilolitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USCups.toKilolitres(value);
		final double convertBack = Volume.Kilolitres.toUSCups(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "67.0,0.0158514","1009.7,0.238883142","918273.0,217.25259" })
	public void testConvertKnownUSCupsToKilolitres(double input, double expectation) {
		final double result = Volume.USCups.toKilolitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSCupsToTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USCups.toTeaspoons(value);
		final double convertBack = Volume.Teaspoons.toUSCups(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.0,159.873","0.2,7.99367","6.12,244.6063" })
	public void testConvertKnownUSCupsToTeaspoons(double input, double expectation) {
		final double result = Volume.USCups.toTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSCupsToTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USCups.toTablespoons(value);
		final double convertBack = Volume.Tablespoons.toUSCups(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.3,57.288","120.6,1606.7274","0.66,8.793036" })
	public void testConvertKnownUSCupsToTablespoons(double input, double expectation) {
		final double result = Volume.USCups.toTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSCupsToQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USCups.toQuarts(value);
		final double convertBack = Volume.Quarts.toUSCups(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1009.0,210.0421","66.98,13.943129","0.123,0.025604731" })
	public void testConvertKnownUSCupsToQuarts(double input, double expectation) {
		final double result = Volume.USCups.toQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSCupsToPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USCups.toPints(value);
		final double convertBack = Volume.Pints.toUSCups(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "5.0,2.08169","0.43,0.1790249","800.4,333.23621" })
	public void testConvertKnownUSCupsToPints(double input, double expectation) {
		final double result = Volume.USCups.toPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSCupsToGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USCups.toGallons(value);
		final double convertBack = Volume.Gallons.toUSCups(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "56.0,2.91436","104.12,5.41862726","6.1,0.317457" })
	public void testConvertKnownUSCupsToGallons(double input, double expectation) {
		final double result = Volume.USCups.toGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSCupsToFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USCups.toFluidOunces(value);
		final double convertBack = Volume.FluidOunces.toUSCups(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "55.0,457.971","0.4,3.3307","88.4,736.084" })
	public void testConvertKnownUSCupsToFluidOunces(double input, double expectation) {
		final double result = Volume.USCups.toFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSCupsToUSTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USCups.toUSTeaspoons(value);
		final double convertBack = Volume.USTeaspoons.toUSCups(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,576.0","5.12,245.7601","6701.0,321648.0" })
	public void testConvertKnownUSCupsToUSTeaspoons(double input, double expectation) {
		final double result = Volume.USCups.toUSTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSCupsToUSTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USCups.toUSTablespoons(value);
		final double convertBack = Volume.USTablespoons.toUSCups(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "677.0,10832.0","1.9,30.4","800.8,12812.8" })
	public void testConvertKnownUSCupsToUSTablespoons(double input, double expectation) {
		final double result = Volume.USCups.toUSTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSCupsToUSQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USCups.toUSQuarts(value);
		final double convertBack = Volume.USQuarts.toUSCups(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "800.8,200.2","4.84,1.21","0.99,0.2475" })
	public void testConvertKnownUSCupsToUSQuarts(double input, double expectation) {
		final double result = Volume.USCups.toUSQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSCupsToUSPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USCups.toUSPints(value);
		final double convertBack = Volume.USPints.toUSCups(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.99,0.495","358.9,179.45","1000.0,500.0" })
	public void testConvertKnownUSCupsToUSPints(double input, double expectation) {
		final double result = Volume.USCups.toUSPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSCupsToUSGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USCups.toUSGallons(value);
		final double convertBack = Volume.USGallons.toUSCups(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1000.0,62.5","0.78,0.04875","123.123,7.6951875" })
	public void testConvertKnownUSCupsToUSGallons(double input, double expectation) {
		final double result = Volume.USCups.toUSGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSCupsToUSFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USCups.toUSFluidOunces(value);
		final double convertBack = Volume.USFluidOunces.toUSCups(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123.123,984.984","4.0,32.0","0.9,7.2" })
	public void testConvertKnownUSCupsToUSFluidOunces(double input, double expectation) {
		final double result = Volume.USCups.toUSFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSFluidOuncesToMillilitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USFluidOunces.toMillilitres(value);
		final double convertBack = Volume.Millilitres.toUSFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.98,28.98206","8.2,242.503","100.3,2966.225" })
	public void testConvertKnownUSFluidOuncesToMillilitres(double input, double expectation) {
		final double result = Volume.USFluidOunces.toMillilitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSFluidOuncesToLitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USFluidOunces.toLitres(value);
		final double convertBack = Volume.Litres.toUSFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,0.354882","150.6,4.4537736","5.9,0.174484" })
	public void testConvertKnownUSFluidOuncesToLitres(double input, double expectation) {
		final double result = Volume.USFluidOunces.toLitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSFluidOuncesToKilolitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USFluidOunces.toKilolitres(value);
		final double convertBack = Volume.Kilolitres.toUSFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "34.0,0.0010055","109.1,0.0032264721","45678.0,1.3508597" })
	public void testConvertKnownUSFluidOuncesToKilolitres(double input, double expectation) {
		final double result = Volume.USFluidOunces.toKilolitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSFluidOuncesToTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USFluidOunces.toTeaspoons(value);
		final double convertBack = Volume.Teaspoons.toUSFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.0,19.9842","0.12,0.5995252","2.99,14.93817" })
	public void testConvertKnownUSFluidOuncesToTeaspoons(double input, double expectation) {
		final double result = Volume.USFluidOunces.toTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSFluidOuncesToTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USFluidOunces.toTablespoons(value);
		final double convertBack = Volume.Tablespoons.toUSFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "800.0,1332.28","0.02,0.03330695","2.7,4.49644" })
	public void testConvertKnownUSFluidOuncesToTablespoons(double input, double expectation) {
		final double result = Volume.USFluidOunces.toTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSFluidOuncesToQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USFluidOunces.toQuarts(value);
		final double convertBack = Volume.Quarts.toUSFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "3.5,0.0910737","0.76,0.01977601","2.0,0.0520421" })
	public void testConvertKnownUSFluidOuncesToQuarts(double input, double expectation) {
		final double result = Volume.USFluidOunces.toQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSFluidOuncesToPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USFluidOunces.toPints(value);
		final double convertBack = Volume.Pints.toUSFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,0.624506","0.4,0.0208169","1.99,0.1035639" })
	public void testConvertKnownUSFluidOuncesToPints(double input, double expectation) {
		final double result = Volume.USFluidOunces.toPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSFluidOuncesToGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USFluidOunces.toGallons(value);
		final double convertBack = Volume.Gallons.toUSFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "3.0,0.0195158","100.5,0.65377934","0.9,0.00585474" })
	public void testConvertKnownUSFluidOuncesToGallons(double input, double expectation) {
		final double result = Volume.USFluidOunces.toGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSFluidOuncesToFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USFluidOunces.toFluidOunces(value);
		final double convertBack = Volume.FluidOunces.toUSFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.6,0.624506","123.0,128.024","8009.0,8336.109" })
	public void testConvertKnownUSFluidOuncesToFluidOunces(double input, double expectation) {
		final double result = Volume.USFluidOunces.toFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSFluidOuncesToUSTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USFluidOunces.toUSTeaspoons(value);
		final double convertBack = Volume.USTeaspoons.toUSFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "45.0,270.0","1.5,9.0","400.8,2404.8008" })
	public void testConvertKnownUSFluidOuncesToUSTeaspoons(double input, double expectation) {
		final double result = Volume.USFluidOunces.toUSTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSFluidOuncesToUSTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USFluidOunces.toUSTablespoons(value);
		final double convertBack = Volume.USTablespoons.toUSFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.0,8.0","170.2,340.4","8811.0,17622.0" })
	public void testConvertKnownUSFluidOuncesToUSTablespoons(double input, double expectation) {
		final double result = Volume.USFluidOunces.toUSTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSFluidOuncesToUSQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USFluidOunces.toUSQuarts(value);
		final double convertBack = Volume.USQuarts.toUSFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "8811.0,275.3438","4.2,0.13125","109.0,3.40625" })
	public void testConvertKnownUSFluidOuncesToUSQuarts(double input, double expectation) {
		final double result = Volume.USFluidOunces.toUSQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSFluidOuncesToUSPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USFluidOunces.toUSPints(value);
		final double convertBack = Volume.USPints.toUSFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "109.0,6.8125","77.09,4.818125","180.4,11.275" })
	public void testConvertKnownUSFluidOuncesToUSPints(double input, double expectation) {
		final double result = Volume.USFluidOunces.toUSPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSFluidOuncesToUSGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USFluidOunces.toUSGallons(value);
		final double convertBack = Volume.USGallons.toUSFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "45.0,0.351563","1.8,0.0140625","778.9,6.0851562" })
	public void testConvertKnownUSFluidOuncesToUSGallons(double input, double expectation) {
		final double result = Volume.USFluidOunces.toUSGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSFluidOuncesToUSCupsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USFluidOunces.toUSCups(value);
		final double convertBack = Volume.USCups.toUSFluidOunces(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "45.0,5.625","66.9,8.3625","0.29,0.03625" })
	public void testConvertKnownUSFluidOuncesToUSCups(double input, double expectation) {
		final double result = Volume.USFluidOunces.toUSCups(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSGallonsToMillilitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USGallons.toMillilitres(value);
		final double convertBack = Volume.Millilitres.toUSGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "2.0,7570.82","0.1,378.541","56.0,211983.0599039" })
	public void testConvertKnownUSGallonsToMillilitres(double input, double expectation) {
		final double result = Volume.USGallons.toMillilitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSGallonsToLitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USGallons.toLitres(value);
		final double convertBack = Volume.Litres.toUSGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "56.0,211.983","5.1,19.3056","2.5,9.46353" })
	public void testConvertKnownUSGallonsToLitres(double input, double expectation) {
		final double result = Volume.USGallons.toLitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSGallonsToKilolitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USGallons.toKilolitres(value);
		final double convertBack = Volume.Kilolitres.toUSGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "111.0,0.420181","9090.0,34.40939","12345.0,46.730908" })
	public void testConvertKnownUSGallonsToKilolitres(double input, double expectation) {
		final double result = Volume.USGallons.toKilolitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSGallonsToTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USGallons.toTeaspoons(value);
		final double convertBack = Volume.Teaspoons.toUSGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "5.0,3197.47","0.4,255.797","8000.0,5115948.07582550" })
	public void testConvertKnownUSGallonsToTeaspoons(double input, double expectation) {
		final double result = Volume.USGallons.toTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSGallonsToTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USGallons.toTablespoons(value);
		final double convertBack = Volume.Tablespoons.toUSGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "79.0,16840.0","12.67,2700.7943","55.1,11745.36" })
	public void testConvertKnownUSGallonsToTablespoons(double input, double expectation) {
		final double result = Volume.USGallons.toTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSGallonsToQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USGallons.toQuarts(value);
		final double convertBack = Volume.Quarts.toUSGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "54.0,179.858","2.9,9.65902","0.2,0.666139" })
	public void testConvertKnownUSGallonsToQuarts(double input, double expectation) {
		final double result = Volume.USGallons.toQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSGallonsToPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USGallons.toPints(value);
		final double convertBack = Volume.Pints.toUSGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "2.0,13.3228","0.12,0.7993672","500.0,3330.7" })
	public void testConvertKnownUSGallonsToPints(double input, double expectation) {
		final double result = Volume.USGallons.toPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSGallonsToGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USGallons.toGallons(value);
		final double convertBack = Volume.Gallons.toUSGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "23.0,19.1515","8.2,6.82793","1.09,0.9076149" })
	public void testConvertKnownUSGallonsToGallons(double input, double expectation) {
		final double result = Volume.USGallons.toGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSGallonsToFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USGallons.toFluidOunces(value);
		final double convertBack = Volume.FluidOunces.toUSGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.09,145.2184","34.0,4529.75","666.0,88729.724440098" })
	public void testConvertKnownUSGallonsToFluidOunces(double input, double expectation) {
		final double result = Volume.USGallons.toFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSGallonsToUSTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USGallons.toUSTeaspoons(value);
		final double convertBack = Volume.USTeaspoons.toUSGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.0,3072.0","1.28,983.0403","6.99,5368.322" })
	public void testConvertKnownUSGallonsToUSTeaspoons(double input, double expectation) {
		final double result = Volume.USGallons.toUSTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSGallonsToUSTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USGallons.toUSTablespoons(value);
		final double convertBack = Volume.USTablespoons.toUSGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "34.0,8704.0","8.4,2150.4","0.091,23.296" })
	public void testConvertKnownUSGallonsToUSTablespoons(double input, double expectation) {
		final double result = Volume.USGallons.toUSTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSGallonsToUSQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USGallons.toUSQuarts(value);
		final double convertBack = Volume.USQuarts.toUSGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.091,0.364","23.0,92.0","1000.8,4003.2" })
	public void testConvertKnownUSGallonsToUSQuarts(double input, double expectation) {
		final double result = Volume.USGallons.toUSQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSGallonsToUSPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USGallons.toUSPints(value);
		final double convertBack = Volume.USPints.toUSGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1000.8,8006.4","23.6,188.8","0.71,5.68" })
	public void testConvertKnownUSGallonsToUSPints(double input, double expectation) {
		final double result = Volume.USGallons.toUSPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSGallonsToUSFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USGallons.toUSFluidOunces(value);
		final double convertBack = Volume.USFluidOunces.toUSGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.71,90.88","83.2,10649.6","777.0,99456.0" })
	public void testConvertKnownUSGallonsToUSFluidOunces(double input, double expectation) {
		final double result = Volume.USGallons.toUSFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSGallonsToUSCupsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USGallons.toUSCups(value);
		final double convertBack = Volume.USCups.toUSGallons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "777.0,12432.0","5.71,91.36","0.98,15.68" })
	public void testConvertKnownUSGallonsToUSCups(double input, double expectation) {
		final double result = Volume.USGallons.toUSCups(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSPintsToMillilitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USPints.toMillilitres(value);
		final double convertBack = Volume.Millilitres.toUSPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.66,312.2965","9.1,4305.91","0.8,378.541" })
	public void testConvertKnownUSPintsToMillilitres(double input, double expectation) {
		final double result = Volume.USPints.toMillilitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSPintsToLitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USPints.toLitres(value);
		final double convertBack = Volume.Litres.toUSPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.5,0.709765","0.6,0.283906","1367.0,646.8322" })
	public void testConvertKnownUSPintsToLitres(double input, double expectation) {
		final double result = Volume.USPints.toLitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSPintsToKilolitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USPints.toKilolitres(value);
		final double convertBack = Volume.Kilolitres.toUSPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1900.0,0.8990353","8888.0,4.205592","123456.0,58.4164747" })
	public void testConvertKnownUSPintsToKilolitres(double input, double expectation) {
		final double result = Volume.USPints.toKilolitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSPintsToTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USPints.toTeaspoons(value);
		final double convertBack = Volume.Teaspoons.toUSPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.0,479.62","0.08,6.394935","3.1,247.804" })
	public void testConvertKnownUSPintsToTeaspoons(double input, double expectation) {
		final double result = Volume.USPints.toTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSPintsToTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USPints.toTablespoons(value);
		final double convertBack = Volume.Tablespoons.toUSPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "2.0,53.2911","0.09,2.398101","1678.0,44711.25" })
	public void testConvertKnownUSPintsToTablespoons(double input, double expectation) {
		final double result = Volume.USPints.toTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSPintsToQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USPints.toQuarts(value);
		final double convertBack = Volume.Quarts.toUSPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,4.99605","503.8,209.75063","0.65,0.2706191" })
	public void testConvertKnownUSPintsToQuarts(double input, double expectation) {
		final double result = Volume.USPints.toQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSPintsToPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USPints.toPints(value);
		final double convertBack = Volume.Pints.toUSPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.9,0.749407","102.0,84.9328","8000.7,6661.97635" })
	public void testConvertKnownUSPintsToPints(double input, double expectation) {
		final double result = Volume.USPints.toPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSPintsToGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USPints.toGallons(value);
		final double convertBack = Volume.Gallons.toUSPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "80.0,8.32674","6.2,0.645322","0.7,0.072859" })
	public void testConvertKnownUSPintsToGallons(double input, double expectation) {
		final double result = Volume.USPints.toGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSPintsToFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USPints.toFluidOunces(value);
		final double convertBack = Volume.FluidOunces.toUSPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,199.842","9.7,161.539","124.0,2065.03" })
	public void testConvertKnownUSPintsToFluidOunces(double input, double expectation) {
		final double result = Volume.USPints.toFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSPintsToUSTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USPints.toUSTeaspoons(value);
		final double convertBack = Volume.USTeaspoons.toUSPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.0,384.0","2.5,240.0","8001.9,768182.4" })
	public void testConvertKnownUSPintsToUSTeaspoons(double input, double expectation) {
		final double result = Volume.USPints.toUSTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSPintsToUSTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USPints.toUSTablespoons(value);
		final double convertBack = Volume.USTablespoons.toUSPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "80.0,2560.0","12.7,406.4","0.6,19.2" })
	public void testConvertKnownUSPintsToUSTablespoons(double input, double expectation) {
		final double result = Volume.USPints.toUSTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSPintsToUSQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USPints.toUSQuarts(value);
		final double convertBack = Volume.USQuarts.toUSPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "0.6,0.3","10090.0,5045.0","4.56,2.28" })
	public void testConvertKnownUSPintsToUSQuarts(double input, double expectation) {
		final double result = Volume.USPints.toUSQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSPintsToUSGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USPints.toUSGallons(value);
		final double convertBack = Volume.USGallons.toUSPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.56,0.57","9000.0,1125.0","47.2,5.9" })
	public void testConvertKnownUSPintsToUSGallons(double input, double expectation) {
		final double result = Volume.USPints.toUSGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSPintsToUSFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USPints.toUSFluidOunces(value);
		final double convertBack = Volume.USFluidOunces.toUSPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "47.2,755.2","1001.0,16016.0","23.9,382.4" })
	public void testConvertKnownUSPintsToUSFluidOunces(double input, double expectation) {
		final double result = Volume.USPints.toUSFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSPintsToUSCupsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USPints.toUSCups(value);
		final double convertBack = Volume.USCups.toUSPints(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "23.9,47.8","1009.0,2018.0","45.9,91.8" })
	public void testConvertKnownUSPintsToUSCups(double input, double expectation) {
		final double result = Volume.USPints.toUSCups(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSQuartsToMillilitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USQuarts.toMillilitres(value);
		final double convertBack = Volume.Millilitres.toUSQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "9000.0,8517176.51400","5.0,4731.76","0.7,662.447" })
	public void testConvertKnownUSQuartsToMillilitres(double input, double expectation) {
		final double result = Volume.USQuarts.toMillilitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSQuartsToLitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USQuarts.toLitres(value);
		final double convertBack = Volume.Litres.toUSQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "9.0,8.51718","1024.0,969.0654","0.8,0.757082" })
	public void testConvertKnownUSQuartsToLitres(double input, double expectation) {
		final double result = Volume.USQuarts.toLitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSQuartsToKilolitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USQuarts.toKilolitres(value);
		final double convertBack = Volume.Kilolitres.toUSQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1000.0,0.946353","6789.0,6.42479","45.0,0.0425859" })
	public void testConvertKnownUSQuartsToKilolitres(double input, double expectation) {
		final double result = Volume.USQuarts.toKilolitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSQuartsToTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USQuarts.toTeaspoons(value);
		final double convertBack = Volume.Teaspoons.toUSQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "45.0,7194.3","6.5,1039.18","0.9,143.886" })
	public void testConvertKnownUSQuartsToTeaspoons(double input, double expectation) {
		final double result = Volume.USQuarts.toTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSQuartsToTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USQuarts.toTablespoons(value);
		final double convertBack = Volume.Tablespoons.toUSQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.0,319.747","89.4,4764.227","4.67,248.8696" })
	public void testConvertKnownUSQuartsToTablespoons(double input, double expectation) {
		final double result = Volume.USQuarts.toTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSQuartsToQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USQuarts.toQuarts(value);
		final double convertBack = Volume.Quarts.toUSQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.6,3.8303","0.9,0.749407","134.0,111.578" })
	public void testConvertKnownUSQuartsToQuarts(double input, double expectation) {
		final double result = Volume.USQuarts.toQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSQuartsToPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USQuarts.toPints(value);
		final double convertBack = Volume.Pints.toUSQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123.0,204.838","1090.9,1816.72854","56.0,93.2595" })
	public void testConvertKnownUSQuartsToPints(double input, double expectation) {
		final double result = Volume.USQuarts.toPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSQuartsToGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USQuarts.toGallons(value);
		final double convertBack = Volume.Gallons.toUSQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "56.0,11.6574","7.12,1.48216","800.0,166.535" })
	public void testConvertKnownUSQuartsToGallons(double input, double expectation) {
		final double result = Volume.USQuarts.toGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSQuartsToFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USQuarts.toFluidOunces(value);
		final double convertBack = Volume.FluidOunces.toUSQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "800.0,26645.56289492","6.8,226.487","0.9,29.9763" })
	public void testConvertKnownUSQuartsToFluidOunces(double input, double expectation) {
		final double result = Volume.USQuarts.toFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSQuartsToUSTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USQuarts.toUSTeaspoons(value);
		final double convertBack = Volume.USTeaspoons.toUSQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "3.0,576.0","0.12,23.04001","4.5,864.0" })
	public void testConvertKnownUSQuartsToUSTeaspoons(double input, double expectation) {
		final double result = Volume.USQuarts.toUSTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSQuartsToUSTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USQuarts.toUSTablespoons(value);
		final double convertBack = Volume.USTablespoons.toUSQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.5,288.0","0.777,49.728","1.8,115.2" })
	public void testConvertKnownUSQuartsToUSTablespoons(double input, double expectation) {
		final double result = Volume.USQuarts.toUSTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSQuartsToUSPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USQuarts.toUSPints(value);
		final double convertBack = Volume.USPints.toUSQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1.8,3.6","900.0,1800.0","12.45,24.9" })
	public void testConvertKnownUSQuartsToUSPints(double input, double expectation) {
		final double result = Volume.USQuarts.toUSPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSQuartsToUSGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USQuarts.toUSGallons(value);
		final double convertBack = Volume.USGallons.toUSQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.45,3.1125","0.8,0.2","100.9,25.225" })
	public void testConvertKnownUSQuartsToUSGallons(double input, double expectation) {
		final double result = Volume.USQuarts.toUSGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSQuartsToUSFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USQuarts.toUSFluidOunces(value);
		final double convertBack = Volume.USFluidOunces.toUSQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100.9,3228.8","12345.0,395040.0","8.7,278.4" })
	public void testConvertKnownUSQuartsToUSFluidOunces(double input, double expectation) {
		final double result = Volume.USQuarts.toUSFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSQuartsToUSCupsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USQuarts.toUSCups(value);
		final double convertBack = Volume.USCups.toUSQuarts(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "8.7,34.8","123.9,495.6","0.66,2.64" })
	public void testConvertKnownUSQuartsToUSCups(double input, double expectation) {
		final double result = Volume.USQuarts.toUSCups(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTablespoonsToMillilitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTablespoons.toMillilitres(value);
		final double convertBack = Volume.Millilitres.toUSTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,177.441","0.8,11.8294","4500.0,66540.44" })
	public void testConvertKnownUSTablespoonsToMillilitres(double input, double expectation) {
		final double result = Volume.USTablespoons.toMillilitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTablespoonsToLitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTablespoons.toLitres(value);
		final double convertBack = Volume.Litres.toUSTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "567.0,8.3841","80.9,1.196249","10000.0,147.8676" })
	public void testConvertKnownUSTablespoonsToLitres(double input, double expectation) {
		final double result = Volume.USTablespoons.toLitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTablespoonsToKilolitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTablespoons.toKilolitres(value);
		final double convertBack = Volume.Kilolitres.toUSTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "9900.0,0.146389","123456.0,1.82551483","18009.0,0.26629485" })
	public void testConvertKnownUSTablespoonsToKilolitres(double input, double expectation) {
		final double result = Volume.USTablespoons.toKilolitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTablespoonsToTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTablespoons.toTeaspoons(value);
		final double convertBack = Volume.Teaspoons.toUSTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "14.0,34.9723","0.9,2.24822","180.0,449.644" })
	public void testConvertKnownUSTablespoonsToTeaspoons(double input, double expectation) {
		final double result = Volume.USTablespoons.toTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTablespoonsToTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTablespoons.toTablespoons(value);
		final double convertBack = Volume.Tablespoons.toUSTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "109.0,90.7614","89.0,74.108","5.2,4.3299" })
	public void testConvertKnownUSTablespoonsToTablespoons(double input, double expectation) {
		final double result = Volume.USTablespoons.toTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTablespoonsToQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTablespoons.toQuarts(value);
		final double convertBack = Volume.Quarts.toUSTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "345.0,4.48863","89.9,1.169647","12.88,0.16757568" })
	public void testConvertKnownUSTablespoonsToQuarts(double input, double expectation) {
		final double result = Volume.USTablespoons.toQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTablespoonsToPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTablespoons.toPints(value);
		final double convertBack = Volume.Pints.toUSTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "12.0,0.312253","809.7,21.069259","0.4,0.0104084" })
	public void testConvertKnownUSTablespoonsToPints(double input, double expectation) {
		final double result = Volume.USTablespoons.toPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTablespoonsToGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTablespoons.toGallons(value);
		final double convertBack = Volume.Gallons.toUSTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "400.0,1.30105","1200.9,3.90608761","8.0,0.0260211" })
	public void testConvertKnownUSTablespoonsToGallons(double input, double expectation) {
		final double result = Volume.USTablespoons.toGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTablespoonsToFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTablespoons.toFluidOunces(value);
		final double convertBack = Volume.FluidOunces.toUSTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "4.0,2.08169","50.9,26.48945","123.0,64.0118" })
	public void testConvertKnownUSTablespoonsToFluidOunces(double input, double expectation) {
		final double result = Volume.USTablespoons.toFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTablespoonsToUSTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTablespoons.toUSTeaspoons(value);
		final double convertBack = Volume.USTeaspoons.toUSTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "90.0,270.0","4.5,13.5","4608.0,13824.0" })
	public void testConvertKnownUSTablespoonsToUSTeaspoons(double input, double expectation) {
		final double result = Volume.USTablespoons.toUSTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTablespoonsToUSQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTablespoons.toUSQuarts(value);
		final double convertBack = Volume.USQuarts.toUSTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "456.0,7.125","7.12,0.11125","194.9,3.0453125" })
	public void testConvertKnownUSTablespoonsToUSQuarts(double input, double expectation) {
		final double result = Volume.USTablespoons.toUSQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTablespoonsToUSPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTablespoons.toUSPints(value);
		final double convertBack = Volume.USPints.toUSTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "194.9,6.090625","2000.0,62.5","18.7,0.584375" })
	public void testConvertKnownUSTablespoonsToUSPints(double input, double expectation) {
		final double result = Volume.USTablespoons.toUSPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTablespoonsToUSGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTablespoons.toUSGallons(value);
		final double convertBack = Volume.USGallons.toUSTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "18.7,0.07304687","1900.0,7.421875","12345.0,48.222656" })
	public void testConvertKnownUSTablespoonsToUSGallons(double input, double expectation) {
		final double result = Volume.USTablespoons.toUSGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTablespoonsToUSFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTablespoons.toUSFluidOunces(value);
		final double convertBack = Volume.USFluidOunces.toUSTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "1234.0,617.0","89.3,44.65","90.99,45.495" })
	public void testConvertKnownUSTablespoonsToUSFluidOunces(double input, double expectation) {
		final double result = Volume.USTablespoons.toUSFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTablespoonsToUSCupsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTablespoons.toUSCups(value);
		final double convertBack = Volume.USCups.toUSTablespoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "90.99,5.686875","1230.0,76.875","9000.9,562.55625" })
	public void testConvertKnownUSTablespoonsToUSCups(double input, double expectation) {
		final double result = Volume.USTablespoons.toUSCups(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTeaspoonsToMillilitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTeaspoons.toMillilitres(value);
		final double convertBack = Volume.Millilitres.toUSTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "6.9,34.0095","1.6,7.88627","800.0,3943.14" })
	public void testConvertKnownUSTeaspoonsToMillilitres(double input, double expectation) {
		final double result = Volume.USTeaspoons.toMillilitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTeaspoonsToLitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTeaspoons.toLitres(value);
		final double convertBack = Volume.Litres.toUSTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "7.0,0.0345024","90.0,0.443603","56.7,0.2794698" })
	public void testConvertKnownUSTeaspoonsToLitres(double input, double expectation) {
		final double result = Volume.USTeaspoons.toLitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTeaspoonsToKilolitresAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTeaspoons.toKilolitres(value);
		final double convertBack = Volume.Kilolitres.toUSTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "10009000.0,49.33356028","1234567.8,6.08508592078","9800.0,0.04830342" })
	public void testConvertKnownUSTeaspoonsToKilolitres(double input, double expectation) {
		final double result = Volume.USTeaspoons.toKilolitres(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTeaspoonsToTeaspoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTeaspoons.toTeaspoons(value);
		final double convertBack = Volume.Teaspoons.toUSTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "122.0,101.586","89.2,74.27448","900.0,749.406" })
	public void testConvertKnownUSTeaspoonsToTeaspoons(double input, double expectation) {
		final double result = Volume.USTeaspoons.toTeaspoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTeaspoonsToTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTeaspoons.toTablespoons(value);
		final double convertBack = Volume.Tablespoons.toUSTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "500.0,138.779","12.34,3.425064","667.0,185.131" })
	public void testConvertKnownUSTeaspoonsToTablespoons(double input, double expectation) {
		final double result = Volume.USTeaspoons.toTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTeaspoonsToQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTeaspoons.toQuarts(value);
		final double convertBack = Volume.Quarts.toUSTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "78.0,0.338274","900.1,3.9035927","116.9,0.50697698" })
	public void testConvertKnownUSTeaspoonsToQuarts(double input, double expectation) {
		final double result = Volume.USTeaspoons.toQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTeaspoonsToPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTeaspoons.toPints(value);
		final double convertBack = Volume.Pints.toUSTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "116.0,1.00615","59.5,0.5160844","1900.0,16.48" })
	public void testConvertKnownUSTeaspoonsToPints(double input, double expectation) {
		final double result = Volume.USTeaspoons.toPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTeaspoonsToGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTeaspoons.toGallons(value);
		final double convertBack = Volume.Gallons.toUSTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "199.0,0.215758","12345.0,13.384583","90001.0,97.580059" })
	public void testConvertKnownUSTeaspoonsToGallons(double input, double expectation) {
		final double result = Volume.USTeaspoons.toGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTeaspoonsToFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTeaspoons.toFluidOunces(value);
		final double convertBack = Volume.FluidOunces.toUSTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "123.0,21.3373","89.0,15.4392","1009.0,175.035" })
	public void testConvertKnownUSTeaspoonsToFluidOunces(double input, double expectation) {
		final double result = Volume.USTeaspoons.toFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTeaspoonsToUSTablespoonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTeaspoons.toUSTablespoons(value);
		final double convertBack = Volume.USTablespoons.toUSTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "190.0,63.3333","5.6,1.86667","0.7,0.233333" })
	public void testConvertKnownUSTeaspoonsToUSTablespoons(double input, double expectation) {
		final double result = Volume.USTeaspoons.toUSTablespoons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTeaspoonsToUSQuartsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTeaspoons.toUSQuarts(value);
		final double convertBack = Volume.USQuarts.toUSTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "100.4,0.5229165","9000.0,46.87498","1234.0,6.427081" })
	public void testConvertKnownUSTeaspoonsToUSQuarts(double input, double expectation) {
		final double result = Volume.USTeaspoons.toUSQuarts(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTeaspoonsToUSPintsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTeaspoons.toUSPints(value);
		final double convertBack = Volume.USPints.toUSTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "109.0,1.13542","3400.0,35.41666","10.7,0.1114583" })
	public void testConvertKnownUSTeaspoonsToUSPints(double input, double expectation) {
		final double result = Volume.USTeaspoons.toUSPints(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTeaspoonsToUSGallonsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTeaspoons.toUSGallons(value);
		final double convertBack = Volume.USGallons.toUSTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "109.0,0.141927","9876.0,12.85937","10900.0,14.192704" })
	public void testConvertKnownUSTeaspoonsToUSGallons(double input, double expectation) {
		final double result = Volume.USTeaspoons.toUSGallons(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTeaspoonsToUSFluidOuncesAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTeaspoons.toUSFluidOunces(value);
		final double convertBack = Volume.USFluidOunces.toUSTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "180.0,30.0","5.6,0.933333","900.5,150.08328" })
	public void testConvertKnownUSTeaspoonsToUSFluidOunces(double input, double expectation) {
		final double result = Volume.USTeaspoons.toUSFluidOunces(input);
		assertEquals(expectation, result, 0.01);
	}

	@Property(tries = 100)
	public void testFromUSTeaspoonsToUSCupsAndBack(@ForAll @DoubleRange(min = -1E12, max = 1E12) double value) {
		final double convertTo = Volume.USTeaspoons.toUSCups(value);
		final double convertBack = Volume.USCups.toUSTeaspoons(convertTo);
		assertEquals(value, convertBack, 0.01);
	}

	@ParameterizedTest
	@CsvSource({ "90.0,1.875","4500.8,93.7666363","0.9,0.01875" })
	public void testConvertKnownUSTeaspoonsToUSCups(double input, double expectation) {
		final double result = Volume.USTeaspoons.toUSCups(input);
		assertEquals(expectation, result, 0.01);
	}

}
